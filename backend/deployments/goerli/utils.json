{
  "address": "0x80893606b8DC27d5aF15ae07587Ba4790586A6a8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_input",
          "type": "bytes"
        }
      ],
      "name": "assemblyKeccak",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "x",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "_hsl",
          "type": "uint256[3]"
        }
      ],
      "name": "getHslString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_packedHsl",
          "type": "uint256"
        }
      ],
      "name": "getHslString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_packedHsl",
          "type": "uint256"
        }
      ],
      "name": "unpackHsl",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x4286de4e40d5a11457d0ce9947e54c57e0d924101ad066e16885966a41d27f8c",
  "receipt": {
    "to": null,
    "from": "0x4594a187923D9c414e28Dfcc4d0242BEBDaF2301",
    "contractAddress": "0x80893606b8DC27d5aF15ae07587Ba4790586A6a8",
    "transactionIndex": 72,
    "gasUsed": "732996",
    "logsBloom": "0x
    "blockHash": "0xe5f848f4c1c92a1b8152f58308184ec55dee9b6eee70576b5e290432a6addb2f",
    "transactionHash": "0x4286de4e40d5a11457d0ce9947e54c57e0d924101ad066e16885966a41d27f8c",
    "logs": [],
    "blockNumber": 8532908,
    "cumulativeGasUsed": "22844919",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cfc764dbb3ae053c2e0e36196439c7c1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_input\",\"type\":\"bytes\"}],\"name\":\"assemblyKeccak\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"_hsl\",\"type\":\"uint256[3]\"}],\"name\":\"getHslString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packedHsl\",\"type\":\"uint256\"}],\"name\":\"getHslString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packedHsl\",\"type\":\"uint256\"}],\"name\":\"unpackHsl\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Utilities.sol\":\"utils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Utilities.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nlibrary utils {\\n  function assemblyKeccak(bytes memory _input) public pure returns (bytes32 x) {\\n    assembly {\\n      x := keccak256(add(_input, 0x20), mload(_input))\\n    }\\n  }\\n\\n  function random(string memory input) internal pure returns (uint256) {\\n    return uint256(assemblyKeccak(abi.encodePacked(input)));\\n  }\\n\\n  function randomRange(\\n    uint256 tokenId,\\n    string memory keyPrefix,\\n    uint256 lower,\\n    uint256 upper\\n  ) internal pure returns (uint256) {\\n    uint256 rand = random(string(abi.encodePacked(keyPrefix, uint2str(tokenId))));\\n    return (rand % (upper - lower + 1)) + lower;\\n  }\\n\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\\n    require(bs.length >= start + 32, \\\"slicing out of range\\\");\\n    uint256 x;\\n    assembly {\\n      x := mload(add(bs, add(0x20, start)))\\n    }\\n    return x;\\n  }\\n\\n  // function getHslString(HSL memory _hsl) public pure returns (string memory) {\\n  //   return string(abi.encodePacked(\\\"hsl(\\\", uint2str(_hsl.h), \\\",\\\", uint2str(_hsl.s), \\\"%,\\\", uint2str(_hsl.l), \\\"%)\\\"));\\n  // }\\n\\n  // function getHslString(\\n  //   uint256 _h,\\n  //   uint256 _s,\\n  //   uint256 _l\\n  // ) public pure returns (string memory) {\\n  //   return string(abi.encodePacked(\\\"hsl(\\\", uint2str(_h), \\\",\\\", uint2str(_s), \\\"%,\\\", uint2str(_l), \\\"%)\\\"));\\n  // }\\n\\n  function getHslString(uint256[3] memory _hsl) public pure returns (string memory) {\\n    return string(abi.encodePacked(\\\"hsl(\\\", uint2str(_hsl[0]), \\\",\\\", uint2str(_hsl[1]), \\\"%,\\\", uint2str(_hsl[2]), \\\"%)\\\"));\\n  }\\n\\n  function getHslString(uint256 _packedHsl) public pure returns (string memory) {\\n    // 3 colors per level, 3 color items per color, H/S/L are color items, 3 bytes each\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"hsl(\\\",\\n          uint2str((_packedHsl >> (12 * 2)) & 0xFFF),\\n          \\\",\\\",\\n          uint2str((_packedHsl >> (12 * 1)) & 0xFFF),\\n          \\\"%,\\\",\\n          uint2str((_packedHsl >> (12 * 0)) & 0xFFF),\\n          \\\"%)\\\"\\n        )\\n      );\\n  }\\n\\n  function unpackHsl(uint256 _packedHsl) public pure returns (uint256[3] memory) {\\n    return [(_packedHsl >> (12 * 2)) & 0xFFF, (_packedHsl >> (12 * 1)) & 0xFFF, (_packedHsl >> (12 * 0)) & 0xFFF];\\n  }\\n\\n  function uint2floatstr(uint256 _i_scaled, uint256 _decimals) internal pure returns (string memory) {\\n    return string.concat(uint2str(_i_scaled / (10**_decimals)), \\\".\\\", uint2str(_i_scaled % (10**_decimals)));\\n  }\\n\\n  function int2str(int256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i < 0) {\\n      return string.concat(\\\"-\\\", uint2str(uint256(-_i)));\\n    } else {\\n      return uint2str(uint256(_i));\\n    }\\n  }\\n\\n  // converts an unsigned integer to a string\\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len;\\n    while (_i != 0) {\\n      k = k - 1;\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n      bytes1 b1 = bytes1(temp);\\n      bstr[k] = b1;\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n\\n  function sqrt(uint256 x) internal pure returns (uint256 z) {\\n    assembly {\\n      // This segment is to get a reasonable initial estimate for the Babylonian method.\\n      // If the initial estimate is bad, the number of correct bits increases ~linearly\\n      // each iteration instead of ~quadratically.\\n      // The idea is to get z*z*y within a small factor of x.\\n      // More iterations here gets y in a tighter range. Currently, we will have\\n      // y in [256, 256*2^16). We ensure y>= 256 so that the relative difference\\n      // between y and y+1 is small. If x < 256 this is not possible, but those cases\\n      // are easy enough to verify exhaustively.\\n      z := 181 // The 'correct' value is 1, but this saves a multiply later\\n      let y := x\\n      // Note that we check y>= 2^(k + 8) but shift right by k bits each branch,\\n      // this is to ensure that if x >= 256, then y >= 256.\\n      if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n        y := shr(128, y)\\n        z := shl(64, z)\\n      }\\n      if iszero(lt(y, 0x1000000000000000000)) {\\n        y := shr(64, y)\\n        z := shl(32, z)\\n      }\\n      if iszero(lt(y, 0x10000000000)) {\\n        y := shr(32, y)\\n        z := shl(16, z)\\n      }\\n      if iszero(lt(y, 0x1000000)) {\\n        y := shr(16, y)\\n        z := shl(8, z)\\n      }\\n      // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8),\\n      // and either y >= 256, or x < 256.\\n      // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n      // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of x, or about 20bps.\\n\\n      // The estimate sqrt(x) = (181/1024) * (x+1) is off by a factor of ~2.83 both when x=1\\n      // and when x = 256 or 1/256. In the worst case, this needs seven Babylonian iterations.\\n      z := shr(18, mul(z, add(y, 65536))) // A multiply is saved from the initial z := 181\\n\\n      // Run the Babylonian method seven times. This should be enough given initial estimate.\\n      // Possibly with a quadratic/cubic polynomial above we could get 4-6.\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n\\n      // See https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division.\\n      // If x+1 is a perfect square, the Babylonian method cycles between\\n      // floor(sqrt(x)) and ceil(sqrt(x)). This check ensures we return floor.\\n      // The solmate implementation assigns zRoundDown := div(x, z) first, but\\n      // since this case is rare, we choose to save gas on the assignment and\\n      // repeat division in the rare case.\\n      // If you don't care whether floor or ceil is returned, you can skip this.\\n      if lt(div(x, z), z) {\\n        z := div(x, z)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xd9731d68507968c320e2213812717ac5bd246114baac950a9cb09c3b2819bb26\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610c5a610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c8063204b34d81461005b5780632f2b565e1461008b5780636fdfe6ea146100bb578063ad4f5fd4146100eb575b600080fd5b61007560048036038101906100709190610592565b61011b565b604051610082919061063e565b60405180910390f35b6100a560048036038101906100a09190610660565b6101a8565b6040516100b2919061063e565b60405180910390f35b6100d560048036038101906100d09190610660565b610205565b6040516100e29190610738565b60405180910390f35b61010560048036038101906101009190610808565b610247565b604051610112919061086a565b60405180910390f35b606061013e8260006003811061013457610133610885565b5b6020020151610257565b61015f8360016003811061015557610154610885565b5b6020020151610257565b6101808460026003811061017657610175610885565b5b6020020151610257565b60405160200161019293929190610a20565b6040516020818303038152906040529050919050565b60606101bb610fff601884901c16610257565b6101cc610fff600c85901c16610257565b6101dd610fff600086901c16610257565b6040516020016101ef93929190610a20565b6040516020818303038152906040529050919050565b61020d6103df565b6040518060600160405280610fff601885901c168152602001610fff600c85901c168152602001610fff600085901c168152509050919050565b6000815160208301209050919050565b60606000820361029e576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506103da565b600082905060005b600082146102d05780806102b990610aac565b915050600a826102c99190610b23565b91506102a6565b60008167ffffffffffffffff8111156102ec576102eb61042b565b5b6040519080825280601f01601f19166020018201604052801561031e5781602001600182028036833780820191505090505b50905060008290505b600086146103d25760018161033c9190610b54565b90506000600a808861034e9190610b23565b6103589190610b88565b876103639190610b54565b603061036f9190610bef565b905060008160f81b90508084848151811061038d5761038c610885565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a886103c99190610b23565b97505050610327565b819450505050505b919050565b6040518060600160405280600390602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104638261041a565b810181811067ffffffffffffffff821117156104825761048161042b565b5b80604052505050565b6000610495610401565b90506104a1828261045a565b919050565b600067ffffffffffffffff8211156104c1576104c061042b565b5b602082029050919050565b600080fd5b6000819050919050565b6104e4816104d1565b81146104ef57600080fd5b50565b600081359050610501816104db565b92915050565b600061051a610515846104a6565b61048b565b90508060208402830185811115610534576105336104cc565b5b835b8181101561055d578061054988826104f2565b845260208401935050602081019050610536565b5050509392505050565b600082601f83011261057c5761057b610415565b5b6003610589848285610507565b91505092915050565b6000606082840312156105a8576105a761040b565b5b60006105b684828501610567565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156105f95780820151818401526020810190506105de565b60008484015250505050565b6000610610826105bf565b61061a81856105ca565b935061062a8185602086016105db565b6106338161041a565b840191505092915050565b600060208201905081810360008301526106588184610605565b905092915050565b6000602082840312156106765761067561040b565b5b6000610684848285016104f2565b91505092915050565b600060039050919050565b600081905092915050565b6000819050919050565b6106b6816104d1565b82525050565b60006106c883836106ad565b60208301905092915050565b6000602082019050919050565b6106ea8161068d565b6106f48184610698565b92506106ff826106a3565b8060005b8381101561073057815161071787826106bc565b9650610722836106d4565b925050600181019050610703565b505050505050565b600060608201905061074d60008301846106e1565b92915050565b600080fd5b600067ffffffffffffffff8211156107735761077261042b565b5b61077c8261041a565b9050602081019050919050565b82818337600083830152505050565b60006107ab6107a684610758565b61048b565b9050828152602081018484840111156107c7576107c6610753565b5b6107d2848285610789565b509392505050565b600082601f8301126107ef576107ee610415565b5b81356107ff848260208601610798565b91505092915050565b60006020828403121561081e5761081d61040b565b5b600082013567ffffffffffffffff81111561083c5761083b610410565b5b610848848285016107da565b91505092915050565b6000819050919050565b61086481610851565b82525050565b600060208201905061087f600083018461085b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b7f68736c2800000000000000000000000000000000000000000000000000000000600082015250565b60006108f56004836108b4565b9150610900826108bf565b600482019050919050565b6000610916826105bf565b61092081856108b4565b93506109308185602086016105db565b80840191505092915050565b7f2c00000000000000000000000000000000000000000000000000000000000000600082015250565b60006109726001836108b4565b915061097d8261093c565b600182019050919050565b7f252c000000000000000000000000000000000000000000000000000000000000600082015250565b60006109be6002836108b4565b91506109c982610988565b600282019050919050565b7f2529000000000000000000000000000000000000000000000000000000000000600082015250565b6000610a0a6002836108b4565b9150610a15826109d4565b600282019050919050565b6000610a2b826108e8565b9150610a37828661090b565b9150610a4282610965565b9150610a4e828561090b565b9150610a59826109b1565b9150610a65828461090b565b9150610a70826109fd565b9150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ab7826104d1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610ae957610ae8610a7d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b2e826104d1565b9150610b39836104d1565b925082610b4957610b48610af4565b5b828204905092915050565b6000610b5f826104d1565b9150610b6a836104d1565b9250828203905081811115610b8257610b81610a7d565b5b92915050565b6000610b93826104d1565b9150610b9e836104d1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bd757610bd6610a7d565b5b828202905092915050565b600060ff82169050919050565b6000610bfa82610be2565b9150610c0583610be2565b9250828201905060ff811115610c1e57610c1d610a7d565b5b9291505056fea264697066735822122048628e2d8e62c10c80e2903897282865a978e3e01659657218604bfaa1e617e364736f6c63430008100033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c8063204b34d81461005b5780632f2b565e1461008b5780636fdfe6ea146100bb578063ad4f5fd4146100eb575b600080fd5b61007560048036038101906100709190610592565b61011b565b604051610082919061063e565b60405180910390f35b6100a560048036038101906100a09190610660565b6101a8565b6040516100b2919061063e565b60405180910390f35b6100d560048036038101906100d09190610660565b610205565b6040516100e29190610738565b60405180910390f35b61010560048036038101906101009190610808565b610247565b604051610112919061086a565b60405180910390f35b606061013e8260006003811061013457610133610885565b5b6020020151610257565b61015f8360016003811061015557610154610885565b5b6020020151610257565b6101808460026003811061017657610175610885565b5b6020020151610257565b60405160200161019293929190610a20565b6040516020818303038152906040529050919050565b60606101bb610fff601884901c16610257565b6101cc610fff600c85901c16610257565b6101dd610fff600086901c16610257565b6040516020016101ef93929190610a20565b6040516020818303038152906040529050919050565b61020d6103df565b6040518060600160405280610fff601885901c168152602001610fff600c85901c168152602001610fff600085901c168152509050919050565b6000815160208301209050919050565b60606000820361029e576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506103da565b600082905060005b600082146102d05780806102b990610aac565b915050600a826102c99190610b23565b91506102a6565b60008167ffffffffffffffff8111156102ec576102eb61042b565b5b6040519080825280601f01601f19166020018201604052801561031e5781602001600182028036833780820191505090505b50905060008290505b600086146103d25760018161033c9190610b54565b90506000600a808861034e9190610b23565b6103589190610b88565b876103639190610b54565b603061036f9190610bef565b905060008160f81b90508084848151811061038d5761038c610885565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a886103c99190610b23565b97505050610327565b819450505050505b919050565b6040518060600160405280600390602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104638261041a565b810181811067ffffffffffffffff821117156104825761048161042b565b5b80604052505050565b6000610495610401565b90506104a1828261045a565b919050565b600067ffffffffffffffff8211156104c1576104c061042b565b5b602082029050919050565b600080fd5b6000819050919050565b6104e4816104d1565b81146104ef57600080fd5b50565b600081359050610501816104db565b92915050565b600061051a610515846104a6565b61048b565b90508060208402830185811115610534576105336104cc565b5b835b8181101561055d578061054988826104f2565b845260208401935050602081019050610536565b5050509392505050565b600082601f83011261057c5761057b610415565b5b6003610589848285610507565b91505092915050565b6000606082840312156105a8576105a761040b565b5b60006105b684828501610567565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156105f95780820151818401526020810190506105de565b60008484015250505050565b6000610610826105bf565b61061a81856105ca565b935061062a8185602086016105db565b6106338161041a565b840191505092915050565b600060208201905081810360008301526106588184610605565b905092915050565b6000602082840312156106765761067561040b565b5b6000610684848285016104f2565b91505092915050565b600060039050919050565b600081905092915050565b6000819050919050565b6106b6816104d1565b82525050565b60006106c883836106ad565b60208301905092915050565b6000602082019050919050565b6106ea8161068d565b6106f48184610698565b92506106ff826106a3565b8060005b8381101561073057815161071787826106bc565b9650610722836106d4565b925050600181019050610703565b505050505050565b600060608201905061074d60008301846106e1565b92915050565b600080fd5b600067ffffffffffffffff8211156107735761077261042b565b5b61077c8261041a565b9050602081019050919050565b82818337600083830152505050565b60006107ab6107a684610758565b61048b565b9050828152602081018484840111156107c7576107c6610753565b5b6107d2848285610789565b509392505050565b600082601f8301126107ef576107ee610415565b5b81356107ff848260208601610798565b91505092915050565b60006020828403121561081e5761081d61040b565b5b600082013567ffffffffffffffff81111561083c5761083b610410565b5b610848848285016107da565b91505092915050565b6000819050919050565b61086481610851565b82525050565b600060208201905061087f600083018461085b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b7f68736c2800000000000000000000000000000000000000000000000000000000600082015250565b60006108f56004836108b4565b9150610900826108bf565b600482019050919050565b6000610916826105bf565b61092081856108b4565b93506109308185602086016105db565b80840191505092915050565b7f2c00000000000000000000000000000000000000000000000000000000000000600082015250565b60006109726001836108b4565b915061097d8261093c565b600182019050919050565b7f252c000000000000000000000000000000000000000000000000000000000000600082015250565b60006109be6002836108b4565b91506109c982610988565b600282019050919050565b7f2529000000000000000000000000000000000000000000000000000000000000600082015250565b6000610a0a6002836108b4565b9150610a15826109d4565b600282019050919050565b6000610a2b826108e8565b9150610a37828661090b565b9150610a4282610965565b9150610a4e828561090b565b9150610a59826109b1565b9150610a65828461090b565b9150610a70826109fd565b9150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ab7826104d1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610ae957610ae8610a7d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b2e826104d1565b9150610b39836104d1565b925082610b4957610b48610af4565b5b828204905092915050565b6000610b5f826104d1565b9150610b6a836104d1565b9250828203905081811115610b8257610b81610a7d565b5b92915050565b6000610b93826104d1565b9150610b9e836104d1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bd757610bd6610a7d565b5b828202905092915050565b600060ff82169050919050565b6000610bfa82610be2565b9150610c0583610be2565b9250828201905060ff811115610c1e57610c1d610a7d565b5b9291505056fea264697066735822122048628e2d8e62c10c80e2903897282865a978e3e01659657218604bfaa1e617e364736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}