{
  "address": "0x5C318A581461B78e177d35055459c2114B07372b",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PIXELS_PER_SIDE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "level",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "size",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mass",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "adjustment",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct BlackHole",
          "name": "_blackHole",
          "type": "tuple"
        }
      ],
      "name": "getBlackHoleSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        }
      ],
      "name": "renderSample",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x48231d4d35d582ac6d026496081050617a36ca7403e96232a62d2483f7d01331",
  "receipt": {
    "to": null,
    "from": "0x4594a187923D9c414e28Dfcc4d0242BEBDaF2301",
    "contractAddress": "0x5C318A581461B78e177d35055459c2114B07372b",
    "transactionIndex": 4,
    "gasUsed": "3415975",
    "logsBloom": "0x00000000000000020000000000000000000000000100000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800800000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000020000000000000000001000000000000000000000000004000000000000000000001000000000000000000000200000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x34af926a06dd9cf5ada9107a1e99f7a927d2cfd9609b521eed837726f7357ec6",
    "transactionHash": "0x48231d4d35d582ac6d026496081050617a36ca7403e96232a62d2483f7d01331",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 32296387,
        "transactionHash": "0x48231d4d35d582ac6d026496081050617a36ca7403e96232a62d2483f7d01331",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004594a187923d9c414e28dfcc4d0242bebdaf2301",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001234377ca7a900000000000000000000000000000000000000000000000000081f8e241a79fc14000000000000000000000000000000000000000000001b805d7d735b7b64d54e000000000000000000000000000000000000000000000000080d59ec9dd25314000000000000000000000000000000000000000000001b805d8fa792f80c7e4e",
        "logIndex": 9,
        "blockHash": "0x34af926a06dd9cf5ada9107a1e99f7a927d2cfd9609b521eed837726f7357ec6"
      }
    ],
    "blockNumber": 32296387,
    "cumulativeGasUsed": "5512440",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "1d3fb844088024e47c50c382733be703",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PIXELS_PER_SIDE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mass\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adjustment\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct BlackHole\",\"name\":\"_blackHole\",\"type\":\"tuple\"}],\"name\":\"getBlackHoleSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"renderSample\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Renderer.sol\":\"Renderer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Renderer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\n/*                                                                                                                                                                                                                                                                                                                                                                                                      \\n                             ,,,,,,,,,,,,,,,,,,,,,,,                            \\n                          ,,,%%%%%%%%%%%%%%%%%%%%%%%,,,                         \\n                    ,,,,,,%%%%%%                 %%%%%%,,,,,                    \\n                    ,,,,,,%%%%%%                 %%%%%%,,,,,                    \\n                    ,,,%%%                             %%/,,                    \\n                 .,,%%%                                  *%%,,,                 \\n               ,,/%%%%%                                  *%%%%%,,,              \\n               ,,/%%                                        %%%,,,              \\n               ,,/%%                                        %%%,,,              \\n               ,,/%%                                        %%%,,,              \\n               ,,/%%                                        %%%,,,              \\n               ,,/%%                                        %%%,,,              \\n               ,,/%%                                        %%%,,,              \\n               ,,/%%                                        %%%,,,              \\n               ,,/%%%%%                                  *%%%%%,,,              \\n                 .,,%%%                                  *%%,,,                 \\n                    ,,,%%%                             %%/,,                    \\n                    ,,,,,,%%%%%%                 %%%%%%,,,,,                    \\n                          ,,,%%%%%%%%%%%%%%%%%%%%%%%,,,                         \\n                          ,,,%%%%%%%%%%%%%%%%%%%%%%%,,,                         \\n                             ,,,,,,,,,,,,,,,,,,,,,,,                                                                                                                                                                                                                                                                                                                                                                          \\n*/\\npragma solidity ^0.8.12;\\n\\nimport \\\"./Utilities.sol\\\";\\nimport \\\"./interfaces/BlackHole.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract Renderer {\\n  uint256 public constant PIXELS_PER_SIDE = 28;\\n  uint256 constant PIXEL_SIZE = 10;\\n  uint256 constant CANVAS_SIZE = PIXELS_PER_SIDE * PIXEL_SIZE;\\n\\n  string constant SPECIAL_STRING =\\n    '<g id=\\\"special\\\"><path d=\\\"M120 0h10v10h-10V0Z\\\" class=\\\"pixel-3\\\"/><path d=\\\"M110 0h10v10h-10z\\\" class=\\\"pixel-2\\\"/><path d=\\\"M130 10h10v10h-10V10Zm-40 0H0v10h90V10Z\\\" class=\\\"pixel-3\\\"/><path d=\\\"M140 20H0v10h140z\\\" class=\\\"pixel-1\\\"/><path d=\\\"M40 40H0v10h40V40Z\\\" class=\\\"pixel-3\\\"/><path d=\\\"M70 30H0v10h70zm40-20h20v10h-20z\\\" class=\\\"pixel-2\\\"/><path d=\\\"M90 20h20V10H90v10Z\\\" class=\\\"pixel-1\\\"/><path d=\\\"M130 30H70v10h60V30Z\\\" class=\\\"pixel-3\\\"/></g>';\\n\\n  bytes constant COLOR_SCHEMES =\\n    hex\\\"02305a05000f05a03700005a01402d05a05001905a03700505a01403705a05002305a03700f05a01410e05a0500fa05a0370e605a01410d0640590fa0560530e603d0180\\\";\\n\\n  constructor() {}\\n\\n  function getPixelSVG(\\n    uint256 pixelClass,\\n    uint8 x,\\n    uint8 y\\n  ) internal pure returns (string memory) {\\n    string memory class = string.concat(\\\"pixel-\\\", utils.uint2str(pixelClass));\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<rect x=\\\"',\\n          utils.uint2str(x * PIXEL_SIZE),\\n          '\\\" y=\\\"',\\n          utils.uint2str(y * PIXEL_SIZE),\\n          '\\\" width=\\\"',\\n          utils.uint2str(PIXEL_SIZE),\\n          '\\\" height=\\\"',\\n          utils.uint2str(PIXEL_SIZE),\\n          '\\\" class=\\\"',\\n          class,\\n          '\\\"/>'\\n        )\\n      );\\n  }\\n\\n  function getColorStyleDefinitions(BlackHole memory _blackHole) internal pure returns (string memory) {\\n    uint256 encoded;\\n\\n    uint256 level = _blackHole.level;\\n\\n    if (level <= 1) {\\n      encoded = utils.sliceUint(COLOR_SCHEMES, 0);\\n    } else if (level <= 3) {\\n      encoded = utils.sliceUint(COLOR_SCHEMES, 27);\\n    } else if (level <= 4) {\\n      encoded = utils.sliceUint(COLOR_SCHEMES, 36);\\n    }\\n\\n    if (level == 4) {\\n      encoded = encoded >> 4;\\n    } else if (level % 2 == 0) {\\n      encoded = encoded >> 148;\\n    } else {\\n      encoded = encoded >> 40;\\n    }\\n\\n    string memory style = \\\"\\\";\\n    for (uint256 i = 0; i < 4; i++) {\\n      string memory fillColor = \\\"black\\\";\\n      if (i > 0) {\\n        uint256 hslPacked = (encoded >> (72 - 12 * 3 * (i - 1))); // first color, next 3 nibbles is next color\\n        uint256[3] memory hsl = utils.unpackHsl(hslPacked);\\n        // hsl[0] -= _blackHole.adjustment;\\n        if (hsl[0] < _blackHole.adjustment) {\\n          hsl[0] = 360 - (_blackHole.adjustment - hsl[0]);\\n        } else {\\n          hsl[0] -= _blackHole.adjustment;\\n        }\\n        hsl[1] -= _blackHole.adjustment * 2;\\n        fillColor = utils.getHslString(hsl);\\n      }\\n\\n      style = string.concat(style, \\\".pixel-\\\", utils.uint2str(i), \\\" {fill:\\\", fillColor, \\\";} \\\");\\n    }\\n\\n    return style;\\n  }\\n\\n  struct QuarterCanvasVariables {\\n    uint256 renderEndIndex;\\n    uint256 renderStartIndex;\\n  }\\n\\n  function getQuarterCanvas(BlackHole memory _blackHole) internal pure returns (string memory) {\\n    QuarterCanvasVariables memory vars;\\n\\n    string memory edgeSVG = \\\"\\\";\\n    vars.renderEndIndex = PIXELS_PER_SIDE / 2;\\n    vars.renderStartIndex = vars.renderEndIndex - _blackHole.size - 5;\\n    for (uint256 i = vars.renderStartIndex; i <= vars.renderEndIndex; i++) {\\n      for (uint256 j = vars.renderStartIndex; j <= vars.renderEndIndex; j++) {\\n        int256 x = int256(j) - int256(PIXELS_PER_SIDE) / 2;\\n        int256 y = int256(i) - int256(PIXELS_PER_SIDE) / 2;\\n        uint256 distance = uint256(utils.sqrt(uint256(x * x) + uint256(y * y)));\\n\\n        int256 classIndex = int256(distance) - int256(_blackHole.size);\\n\\n        if (distance > _blackHole.size && distance <= _blackHole.size + 3) {\\n          edgeSVG = string.concat(edgeSVG, getPixelSVG(uint256(classIndex), uint8(j), uint8(i)));\\n        }\\n      }\\n    }\\n\\n    return edgeSVG;\\n  }\\n\\n  function getAnimatedStars(BlackHole memory _blackHole) internal pure returns (string memory) {\\n    string memory svg = \\\"\\\";\\n\\n    for (uint256 i = 0; i < 10; i++) {\\n      // x is a random number from -PIXELS_PER_SIDE to 2*PIXELS_PER_SIDE\\n      uint256 x = utils.randomRange(\\n        _blackHole.tokenId,\\n        string.concat(\\\"animatedStarX\\\", utils.uint2str(i)),\\n        0,\\n        PIXELS_PER_SIDE * 3\\n      );\\n\\n      uint256 radius = _blackHole.size + 6;\\n      int256 discriminant = int256(radius) *\\n        int256(radius) -\\n        (int256(x) - int256(PIXELS_PER_SIDE) / 2) *\\n        (int256(x) - int256(PIXELS_PER_SIDE) / 2);\\n      uint256 minY = 0;\\n      uint256 maxY = PIXELS_PER_SIDE * 2;\\n      if (discriminant > 0) {\\n        // Bottom edge to bottom canvas\\n        minY = utils.sqrt(uint256(discriminant)) + PIXELS_PER_SIDE / 2;\\n        maxY = PIXELS_PER_SIDE * 2;\\n\\n        // Top canvas to top edge\\n        if (utils.randomRange(_blackHole.tokenId, string.concat(\\\"animatedStarY\\\", utils.uint2str(i)), 0, 2) == 1) {\\n          maxY = PIXELS_PER_SIDE - minY;\\n          minY = 0;\\n        }\\n      }\\n\\n      // Select a random value between minY and maxY\\n      x = x * PIXEL_SIZE;\\n      uint256 y = utils.randomRange(_blackHole.tokenId, string.concat(\\\"animatedStarY\\\", utils.uint2str(i)), minY, maxY) *\\n        PIXEL_SIZE;\\n\\n      uint256 fillLightness = utils.randomRange(\\n        _blackHole.tokenId,\\n        string.concat(\\\"fillLightness\\\", utils.uint2str(i)),\\n        15,\\n        200\\n      );\\n      string memory fillColor = utils.getHslString([0, 0, fillLightness]);\\n\\n      uint256 animateDuration = 2;\\n      uint256 animationOffset = utils.randomRange(\\n        _blackHole.tokenId,\\n        string.concat(\\\"animationOffset\\\", utils.uint2str(i)),\\n        0,\\n        2000\\n      );\\n\\n      string memory animationCommon = string.concat(\\n        'dur=\\\"',\\n        utils.uint2str(animateDuration),\\n        's\\\" repeatCount=\\\"indefinite\\\" begin=\\\"',\\n        utils.uint2floatstr(animationOffset, 3),\\n        's\\\" calcMode=\\\"spline\\\" keyTimes=\\\"0;1\\\" keySplines=\\\"0.4,0,0.2,1\\\"'\\n      );\\n\\n      string memory transformAnimation = string.concat(\\n        '<animate attributeName=\\\"x\\\" from=\\\"',\\n        utils.uint2str(x),\\n        '\\\" to=\\\"',\\n        utils.uint2str((PIXELS_PER_SIDE * PIXEL_SIZE) / 2),\\n        '\\\" values=\\\"',\\n        utils.uint2str(x),\\n        \\\";\\\",\\n        utils.uint2str((PIXELS_PER_SIDE * PIXEL_SIZE) / 2),\\n        '\\\" ',\\n        animationCommon,\\n        \\\"/>\\\"\\n      );\\n\\n      transformAnimation = string.concat(\\n        transformAnimation,\\n        '<animate attributeName=\\\"y\\\" from=\\\"',\\n        utils.uint2str(y),\\n        '\\\" to=\\\"',\\n        utils.uint2str((PIXELS_PER_SIDE * PIXEL_SIZE) / 2),\\n        '\\\" values=\\\"',\\n        utils.uint2str(y),\\n        \\\";\\\",\\n        utils.uint2str((PIXELS_PER_SIDE * PIXEL_SIZE) / 2),\\n        '\\\" ',\\n        animationCommon,\\n        \\\"/>\\\"\\n      );\\n\\n      transformAnimation = string.concat(\\n        transformAnimation,\\n        '<animate attributeName=\\\"fill-opacity\\\" from=\\\"1\\\" to=\\\"0\\\" values=\\\"1;0\\\" ',\\n        animationCommon,\\n        \\\"/>\\\"\\n      );\\n\\n      string memory pixel = string.concat(\\n        '<rect x=\\\"',\\n        utils.uint2str(x),\\n        '\\\" y=\\\"',\\n        utils.uint2str(y),\\n        '\\\" width=\\\"',\\n        utils.uint2str(PIXEL_SIZE),\\n        '\\\" height=\\\"',\\n        utils.uint2str(PIXEL_SIZE),\\n        '\\\" fill=\\\"',\\n        fillColor,\\n        '\\\">',\\n        transformAnimation,\\n        \\\"</rect>\\\"\\n      );\\n\\n      svg = string.concat(svg, pixel);\\n    }\\n    return svg;\\n  }\\n\\n  function getStaticBackground(BlackHole memory _blackHole) internal pure returns (string memory) {\\n    string memory svg = \\\"\\\";\\n    for (uint256 i = 0; i < 30; i++) {\\n      uint256 x = utils.randomRange(\\n        _blackHole.tokenId,\\n        string.concat(\\\"staticX\\\", utils.uint2str(i)),\\n        0,\\n        PIXELS_PER_SIDE\\n      ) * PIXEL_SIZE;\\n      uint256 y = utils.randomRange(\\n        _blackHole.tokenId,\\n        string.concat(\\\"staticY\\\", utils.uint2str(i)),\\n        0,\\n        PIXELS_PER_SIDE\\n      ) * PIXEL_SIZE;\\n\\n      uint256 fillLightness = utils.randomRange(\\n        _blackHole.tokenId,\\n        string.concat(\\\"fillLightness\\\", utils.uint2str(i)),\\n        5,\\n        12\\n      );\\n      string memory fillColor = utils.getHslString([0, 0, fillLightness]);\\n\\n      string memory pixel = string.concat(\\n        '<rect x=\\\"',\\n        utils.uint2str(x),\\n        '\\\" y=\\\"',\\n        utils.uint2str(y),\\n        '\\\" width=\\\"',\\n        utils.uint2str(PIXEL_SIZE),\\n        '\\\" height=\\\"',\\n        utils.uint2str(PIXEL_SIZE),\\n        '\\\" fill=\\\"',\\n        fillColor,\\n        '\\\"/>'\\n      );\\n\\n      svg = string.concat(svg, pixel);\\n    }\\n    return svg;\\n  }\\n\\n  function getBlackHoleSVG(BlackHole memory _blackHole) public pure returns (string memory) {\\n    string memory svg = string.concat(\\n      '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 ',\\n      utils.uint2str(CANVAS_SIZE),\\n      \\\" \\\",\\n      utils.uint2str(CANVAS_SIZE),\\n      '\\\" width=\\\"500\\\" height=\\\"500\\\">'\\n    );\\n\\n    // -- defs\\n    // Style\\n    string memory colorsStyle = getColorStyleDefinitions(_blackHole);\\n    string memory style = string.concat(\\\"<style>\\\", colorsStyle, \\\"</style>\\\");\\n    svg = string.concat(svg, \\\"<defs>\\\", style);\\n\\n    // Edge def\\n    string memory edgeSvg = getQuarterCanvas(_blackHole);\\n    string memory g = string.concat('<g id=\\\"edge\\\">', edgeSvg, \\\"</g>\\\");\\n    svg = string.concat(svg, '<g id=\\\"full\\\">', g);\\n    svg = string.concat(\\n      svg,\\n      '<use href=\\\"#edge\\\" transform=\\\"scale(-1,1),translate(-',\\n      utils.uint2str(CANVAS_SIZE),\\n      ',0)\\\" />'\\n    );\\n    svg = string.concat(\\n      svg,\\n      '<use href=\\\"#edge\\\" transform=\\\"scale(1,-1),translate(0,-',\\n      utils.uint2str(CANVAS_SIZE),\\n      ')\\\" />'\\n    );\\n    svg = string.concat(\\n      svg,\\n      '<use href=\\\"#edge\\\" transform=\\\"scale(-1,-1),translate(-',\\n      utils.uint2str(CANVAS_SIZE),\\n      \\\",-\\\",\\n      utils.uint2str(CANVAS_SIZE),\\n      ')\\\" /></g>'\\n    );\\n\\n    // Special string def\\n    if (_blackHole.level == 4) svg = string.concat(svg, SPECIAL_STRING);\\n\\n    // -- end defs\\n    svg = string.concat(svg, \\\"</defs>\\\");\\n\\n    // Black background\\n    svg = string.concat(\\n      svg,\\n      '<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"',\\n      utils.uint2str(CANVAS_SIZE),\\n      '\\\" height=\\\"',\\n      utils.uint2str(CANVAS_SIZE),\\n      '\\\" fill=\\\"black\\\"/>'\\n    );\\n\\n    // Static background\\n    svg = string.concat(svg, '<g id=\\\"background\\\">', getStaticBackground(_blackHole), \\\"</g>\\\");\\n\\n    // Black background part of black hole\\n    uint256 backgroundOffset = CANVAS_SIZE / 2 - _blackHole.size * PIXEL_SIZE;\\n    uint256 backgroundSize = 2 * _blackHole.size * PIXEL_SIZE;\\n    svg = string.concat(\\n      svg,\\n      '<rect fill=\\\"black\\\" x=\\\"',\\n      utils.uint2str(backgroundOffset),\\n      '\\\" y=\\\"',\\n      utils.uint2str(backgroundOffset),\\n      '\\\" width=\\\"',\\n      utils.uint2str(backgroundSize),\\n      '\\\"  height=\\\"',\\n      utils.uint2str(backgroundSize),\\n      '\\\" />'\\n    );\\n\\n    // Edge part\\n    svg = string.concat(svg, '<use href=\\\"#full\\\" />');\\n\\n    // Animated stars\\n    // svg += getAnimatedStars(holeSize, level)\\n    svg = string.concat(svg, getAnimatedStars(_blackHole));\\n\\n    // Special string\\n    if (_blackHole.level == 4) {\\n      svg = string.concat(\\n        svg,\\n        '<use href=\\\"#special\\\" transform=\\\"translate(',\\n        utils.uint2str(CANVAS_SIZE / 2 - PIXEL_SIZE),\\n        \\\",\\\",\\n        utils.uint2str(CANVAS_SIZE / 2),\\n        ')\\\" />',\\n        '<use href=\\\"#special\\\" transform=\\\"scale(-1,1),translate(-',\\n        utils.uint2str(CANVAS_SIZE / 2 + PIXEL_SIZE),\\n        \\\",\\\",\\n        utils.uint2str(CANVAS_SIZE / 2),\\n        ')\\\" />'\\n      );\\n    }\\n\\n    svg = string.concat(svg, \\\"</svg>\\\");\\n\\n    return svg;\\n  }\\n\\n  function renderSample(uint256 tokenId, uint256 level) external pure returns (string memory) {\\n    uint256 size = PIXELS_PER_SIDE / 2 - (10 - level); // 5\\n    BlackHole memory blackHole = BlackHole({\\n      tokenId: tokenId,\\n      level: level,\\n      size: size,\\n      mass: 1,\\n      adjustment: 15,\\n      name: \\\"Micro\\\"\\n    });\\n    return getBlackHoleSVG(blackHole);\\n  }\\n}\\n\",\"keccak256\":\"0xb567b51e06a5396e42422b3c5e2d2dde0e061dea98883bce1f5c9b1436bccae4\",\"license\":\"MIT\"},\"contracts/Utilities.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\n/*                          \\n                                .................                               \\n                          ......22222222222222222......                         \\n                       ......22244444444444444444222.....                       \\n                       ...222444444           444444222..                       \\n                    ...222444444                 44444422*..                    \\n                    ...222444                       44422*..                    \\n                    ...222444                       44422*..                    \\n                    ...222444                       44422*..                    \\n                    ...222444                       44422*..                    \\n                    ...222444                       44422*..                    \\n                    ...222444444                 44444422*..                    \\n                       ...222444444           444444222..                       \\n                       ......22244444444444444444222.....                       \\n                          ......22222222222222222......                         \\n                                .................\\n*/\\npragma solidity ^0.8.12;\\n\\nlibrary utils {\\n  function assemblyKeccak(bytes memory _input) public pure returns (bytes32 x) {\\n    assembly {\\n      x := keccak256(add(_input, 0x20), mload(_input))\\n    }\\n  }\\n\\n  function random(string memory input) internal pure returns (uint256) {\\n    return uint256(assemblyKeccak(abi.encodePacked(input)));\\n  }\\n\\n  function randomRange(\\n    uint256 tokenId,\\n    string memory keyPrefix,\\n    uint256 lower,\\n    uint256 upper\\n  ) internal pure returns (uint256) {\\n    uint256 rand = random(string(abi.encodePacked(keyPrefix, uint2str(tokenId))));\\n    return (rand % (upper - lower + 1)) + lower;\\n  }\\n\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\\n    require(bs.length >= start + 32, \\\"slicing out of range\\\");\\n    uint256 x;\\n    assembly {\\n      x := mload(add(bs, add(0x20, start)))\\n    }\\n    return x;\\n  }\\n\\n  // function getHslString(HSL memory _hsl) public pure returns (string memory) {\\n  //   return string(abi.encodePacked(\\\"hsl(\\\", uint2str(_hsl.h), \\\",\\\", uint2str(_hsl.s), \\\"%,\\\", uint2str(_hsl.l), \\\"%)\\\"));\\n  // }\\n\\n  // function getHslString(\\n  //   uint256 _h,\\n  //   uint256 _s,\\n  //   uint256 _l\\n  // ) public pure returns (string memory) {\\n  //   return string(abi.encodePacked(\\\"hsl(\\\", uint2str(_h), \\\",\\\", uint2str(_s), \\\"%,\\\", uint2str(_l), \\\"%)\\\"));\\n  // }\\n\\n  function getHslString(uint256[3] memory _hsl) public pure returns (string memory) {\\n    return string(abi.encodePacked(\\\"hsl(\\\", uint2str(_hsl[0]), \\\",\\\", uint2str(_hsl[1]), \\\"%,\\\", uint2str(_hsl[2]), \\\"%)\\\"));\\n  }\\n\\n  function getHslString(uint256 _packedHsl) public pure returns (string memory) {\\n    // 3 colors per level, 3 color items per color, H/S/L are color items, 3 bytes each\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"hsl(\\\",\\n          uint2str((_packedHsl >> (12 * 2)) & 0xFFF),\\n          \\\",\\\",\\n          uint2str((_packedHsl >> (12 * 1)) & 0xFFF),\\n          \\\"%,\\\",\\n          uint2str((_packedHsl >> (12 * 0)) & 0xFFF),\\n          \\\"%)\\\"\\n        )\\n      );\\n  }\\n\\n  function unpackHsl(uint256 _packedHsl) public pure returns (uint256[3] memory) {\\n    return [(_packedHsl >> (12 * 2)) & 0xFFF, (_packedHsl >> (12 * 1)) & 0xFFF, (_packedHsl >> (12 * 0)) & 0xFFF];\\n  }\\n\\n  function uint2floatstr(uint256 _i_scaled, uint256 _decimals) internal pure returns (string memory) {\\n    return string.concat(uint2str(_i_scaled / (10**_decimals)), \\\".\\\", uint2str(_i_scaled % (10**_decimals)));\\n  }\\n\\n  function int2str(int256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i < 0) {\\n      return string.concat(\\\"-\\\", uint2str(uint256(-_i)));\\n    } else {\\n      return uint2str(uint256(_i));\\n    }\\n  }\\n\\n  // converts an unsigned integer to a string\\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len;\\n    while (_i != 0) {\\n      k = k - 1;\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n      bytes1 b1 = bytes1(temp);\\n      bstr[k] = b1;\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n\\n  function sqrt(uint256 x) internal pure returns (uint256 z) {\\n    assembly {\\n      // This segment is to get a reasonable initial estimate for the Babylonian method.\\n      // If the initial estimate is bad, the number of correct bits increases ~linearly\\n      // each iteration instead of ~quadratically.\\n      // The idea is to get z*z*y within a small factor of x.\\n      // More iterations here gets y in a tighter range. Currently, we will have\\n      // y in [256, 256*2^16). We ensure y>= 256 so that the relative difference\\n      // between y and y+1 is small. If x < 256 this is not possible, but those cases\\n      // are easy enough to verify exhaustively.\\n      z := 181 // The 'correct' value is 1, but this saves a multiply later\\n      let y := x\\n      // Note that we check y>= 2^(k + 8) but shift right by k bits each branch,\\n      // this is to ensure that if x >= 256, then y >= 256.\\n      if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n        y := shr(128, y)\\n        z := shl(64, z)\\n      }\\n      if iszero(lt(y, 0x1000000000000000000)) {\\n        y := shr(64, y)\\n        z := shl(32, z)\\n      }\\n      if iszero(lt(y, 0x10000000000)) {\\n        y := shr(32, y)\\n        z := shl(16, z)\\n      }\\n      if iszero(lt(y, 0x1000000)) {\\n        y := shr(16, y)\\n        z := shl(8, z)\\n      }\\n      // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8),\\n      // and either y >= 256, or x < 256.\\n      // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n      // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of x, or about 20bps.\\n\\n      // The estimate sqrt(x) = (181/1024) * (x+1) is off by a factor of ~2.83 both when x=1\\n      // and when x = 256 or 1/256. In the worst case, this needs seven Babylonian iterations.\\n      z := shr(18, mul(z, add(y, 65536))) // A multiply is saved from the initial z := 181\\n\\n      // Run the Babylonian method seven times. This should be enough given initial estimate.\\n      // Possibly with a quadratic/cubic polynomial above we could get 4-6.\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n\\n      // See https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division.\\n      // If x+1 is a perfect square, the Babylonian method cycles between\\n      // floor(sqrt(x)) and ceil(sqrt(x)). This check ensures we return floor.\\n      // The solmate implementation assigns zRoundDown := div(x, z) first, but\\n      // since this case is rare, we choose to save gas on the assignment and\\n      // repeat division in the rare case.\\n      // If you don't care whether floor or ceil is returned, you can skip this.\\n      if lt(div(x, z), z) {\\n        z := div(x, z)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xfc9202784d579579f571e25b52d72e6014042da48cd61fd3ae81a8b33f8a9f68\",\"license\":\"MIT\"},\"contracts/interfaces/BlackHole.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nstruct BlackHole {\\n  uint256 tokenId;\\n  uint256 level;\\n  uint256 size;\\n  uint256 mass;\\n  uint256 adjustment;\\n  string name;\\n}\\n\",\"keccak256\":\"0x74aa9fbaa733f9f6407f9f7c73d96a374efcc4783a7f54e6ad42b3850fd26e0b\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063030ac52514610046578063a0cd73a514610064578063cfeb9a0214610094575b600080fd5b61004e6100c4565b60405161005b919061170c565b60405180910390f35b61007e60048036038101906100799190611767565b6100c9565b60405161008b9190611837565b60405180910390f35b6100ae60048036038101906100a99190611a54565b61016f565b6040516100bb9190611837565b60405180910390f35b601c81565b6060600082600a6100da9190611acc565b6002601c6100e89190611b2f565b6100f29190611acc565b905060006040518060c0016040528086815260200185815260200183815260200160018152602001600f81526020016040518060400160405280600581526020017f4d6963726f00000000000000000000000000000000000000000000000000000081525081525090506101658161016f565b9250505092915050565b60606000610189600a601c6101849190611b60565b61060d565b61019f600a601c61019a9190611b60565b61060d565b6040516020016101b0929190611cb4565b604051602081830303815290604052905060006101cc84610795565b90506000816040516020016101e19190611d4d565b60405160208183030381529060405290508281604051602001610205929190611da8565b6040516020818303038152906040529250600061022186610b37565b90506000816040516020016102369190611e27565b6040516020818303038152906040529050848160405160200161025a929190611e82565b604051602081830303815290604052945084610282600a601c61027d9190611b60565b61060d565b604051602001610293929190611f4d565b6040516020818303038152906040529450846102bb600a601c6102b69190611b60565b61060d565b6040516020016102cc929190612023565b6040516020818303038152906040529450846102f4600a601c6102ef9190611b60565b61060d565b61030a600a601c6103059190611b60565b61060d565b60405160200161031c9392919061211f565b604051602081830303815290604052945060048760200151036103795784604051806101e001604052806101a98152602001613b136101a99139604051602001610367929190612179565b60405160208183030381529060405294505b8460405160200161038a91906121c3565b6040516020818303038152906040529450846103b2600a601c6103ad9190611b60565b61060d565b6103c8600a601c6103c39190611b60565b61060d565b6040516020016103da9392919061225b565b6040516020818303038152906040529450846103f588610cc8565b6040516020016104069291906122df565b60405160208183030381529060405294506000600a886040015161042a9190611b60565b6002600a601c61043a9190611b60565b6104449190611b2f565b61044e9190611acc565b90506000600a896040015160026104659190611b60565b61046f9190611b60565b90508661047b8361060d565b6104848461060d565b61048d8461060d565b6104968561060d565b6040516020016104aa9594939291906123df565b6040516020818303038152906040529650866040516020016104cc919061249b565b6040516020818303038152906040529650866104e78a610eea565b6040516020016104f8929190612179565b604051602081830303815290604052965060048960200151036105dc5786610544600a6002600a601c61052b9190611b60565b6105359190611b2f565b61053f9190611acc565b61060d565b6105666002600a601c6105579190611b60565b6105619190611b2f565b61060d565b610594600a6002600a601c61057b9190611b60565b6105859190611b2f565b61058f91906124c1565b61060d565b6105b66002600a601c6105a79190611b60565b6105b19190611b2f565b61060d565b6040516020016105ca9594939291906125ff565b60405160208183030381529060405296505b866040516020016105ed91906126c2565b604051602081830303815290604052965086975050505050505050919050565b606060008203610654576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610790565b600082905060005b6000821461068657808061066f906126e8565b915050600a8261067f9190611b2f565b915061065c565b60008167ffffffffffffffff8111156106a2576106a161185e565b5b6040519080825280601f01601f1916602001820160405280156106d45781602001600182028036833780820191505090505b50905060008290505b60008614610788576001816106f29190611acc565b90506000600a80886107049190611b2f565b61070e9190611b60565b876107199190611acc565b6030610725919061273d565b905060008160f81b90508084848151811061074357610742612772565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8861077f9190611b2f565b975050506106dd565b819450505050505b919050565b606060008083602001519050600181116107d3576107cc604051806080016040528060448152602001613cbc6044913960006113ce565b9150610835565b60038111610805576107fe604051806080016040528060448152602001613cbc60449139601b6113ce565b9150610834565b6004811161083357610830604051806080016040528060448152602001613cbc6044913960246113ce565b91505b5b5b6004810361084957600482901c9150610872565b600060028261085891906127a1565b0361086957609482901c9150610871565b602882901c91505b5b600060405180602001604052806000815250905060005b6004811015610b2b5760006040518060400160405280600581526020017f626c61636b00000000000000000000000000000000000000000000000000000081525090506000821115610ae95760006001836108e49190611acc565b60246108f09190611b60565b60486108fc9190611acc565b86901c9050600073__$5187c88d6fd7cbb2d86814aea483adb806$__636fdfe6ea836040518263ffffffff1660e01b815260040161093a91906127e1565b606060405180830381865af4158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b91906128c7565b905088608001518160006003811061099657610995612772565b5b602002015110156109f857806000600381106109b5576109b4612772565b5b602002015189608001516109c99190611acc565b6101686109d69190611acc565b816000600381106109ea576109e9612772565b5b602002018181525050610a2a565b886080015181600060038110610a1157610a10612772565b5b60200201818151610a229190611acc565b915081815250505b60028960800151610a3b9190611b60565b81600160038110610a4f57610a4e612772565b5b60200201818151610a609190611acc565b9150818152505073__$5187c88d6fd7cbb2d86814aea483adb806$__63204b34d8826040518263ffffffff1660e01b8152600401610a9e919061299f565b600060405180830381865af4158015610abb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ae49190612a2a565b925050505b82610af38361060d565b82604051602001610b0693929190612ae5565b6040516020818303038152906040529250508080610b23906126e8565b915050610889565b50809350505050919050565b6060610b416116d9565b60006040518060200160405280600081525090506002601c610b639190611b2f565b826000018181525050600584604001518360000151610b829190611acc565b610b8c9190611acc565b8260200181815250506000826020015190505b82600001518111610cbd576000836020015190505b83600001518111610ca95760006002601c610bcf9190612b4d565b82610bda9190612bb7565b905060006002601c610bec9190612b4d565b84610bf79190612bb7565b90506000610c258283610c0a9190612bfa565b8485610c169190612bfa565b610c2091906124c1565b611435565b90506000896040015182610c399190612bb7565b9050896040015182118015610c5e575060038a60400151610c5a91906124c1565b8211155b15610c925786610c6f82878961151b565b604051602001610c80929190612179565b60405160208183030381529060405296505b505050508080610ca1906126e8565b915050610bb4565b508080610cb5906126e8565b915050610b9f565b508092505050919050565b6060600060405180602001604052806000815250905060005b601e811015610ee0576000600a610d278660000151610cff8561060d565b604051602001610d0f9190612d37565b6040516020818303038152906040526000601c6115bb565b610d319190611b60565b90506000600a610d708760000151610d488661060d565b604051602001610d589190612d83565b6040516020818303038152906040526000601c6115bb565b610d7a9190611b60565b90506000610db78760000151610d8f8661060d565b604051602001610d9f9190612dcf565b6040516020818303038152906040526005600c6115bb565b9050600073__$5187c88d6fd7cbb2d86814aea483adb806$__63204b34d860405180606001604052806000815260200160008152602001858152506040518263ffffffff1660e01b8152600401610e0e919061299f565b600060405180830381865af4158015610e2b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e549190612a2a565b90506000610e618561060d565b610e6a8561060d565b610e74600a61060d565b610e7e600a61060d565b85604051602001610e93959493929190612e67565b60405160208183030381529060405290508681604051602001610eb7929190612179565b604051602081830303815290604052965050505050508080610ed8906126e8565b915050610ce1565b5080915050919050565b6060600060405180602001604052806000815250905060005b600a8110156113c4576000610f538560000151610f1f8461060d565b604051602001610f2f9190612f32565b60405160208183030381529060405260006003601c610f4e9190611b60565b6115bb565b9050600060068660400151610f6891906124c1565b905060006002601c610f7a9190612b4d565b83610f859190612bb7565b6002601c610f939190612b4d565b84610f9e9190612bb7565b610fa89190612bfa565b8283610fb49190612bfa565b610fbe9190612bb7565b90506000806002601c610fd19190611b60565b90506000831315611064576002601c610fea9190611b2f565b610ff384611435565b610ffd91906124c1565b91506002601c61100d9190611b60565b9050600161104a8a600001516110228961060d565b6040516020016110329190612f7e565b604051602081830303815290604052600060026115bb565b036110635781601c61105c9190611acc565b9050600091505b5b600a856110719190611b60565b94506000600a6110ae8b600001516110888a61060d565b6040516020016110989190612f7e565b60405160208183030381529060405286866115bb565b6110b89190611b60565b905060006110f58b600001516110cd8a61060d565b6040516020016110dd9190612dcf565b604051602081830303815290604052600f60c86115bb565b9050600073__$5187c88d6fd7cbb2d86814aea483adb806$__63204b34d860405180606001604052806000815260200160008152602001858152506040518263ffffffff1660e01b815260040161114c919061299f565b600060405180830381865af4158015611169573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111929190612a2a565b905060006002905060006111d68e600001516111ad8d61060d565b6040516020016111bd9190612fca565b60405160208183030381529060405260006107d06115bb565b905060006111e38361060d565b6111ee83600361162b565b6040516020016111ff9291906130fa565b6040516020818303038152906040529050600061121b8c61060d565b61123d6002600a601c61122e9190611b60565b6112389190611b2f565b61060d565b6112468e61060d565b6112686002600a601c6112599190611b60565b6112639190611b2f565b61060d565b8560405160200161127d959493929190613273565b6040516020818303038152906040529050806112988861060d565b6112ba6002600a601c6112ab9190611b60565b6112b59190611b2f565b61060d565b6112c38a61060d565b6112e56002600a601c6112d69190611b60565b6112e09190611b2f565b61060d565b866040516020016112fb96959493929190613386565b6040516020818303038152906040529050808260405160200161131f9291906134cc565b6040516020818303038152906040529050600061133b8d61060d565b6113448961060d565b61134e600a61060d565b611358600a61060d565b898660405160200161136f96959493929190613556565b60405160208183030381529060405290508e81604051602001611393929190612179565b6040516020818303038152906040529e505050505050505050505050505080806113bc906126e8565b915050610f03565b5080915050919050565b60006020826113dd91906124c1565b83511015611420576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141790613663565b60405180910390fd5b60008260200184015190508091505092915050565b600060b5905081710100000000000000000000000000000000008110611462578060801c90508160401b91505b69010000000000000000008110611480578060401c90508160201b91505b65010000000000811061149a578060201c90508160101b91505b630100000081106114b2578060101c90508160081b91505b620100008101820260121c9150818304820160011c9150818304820160011c9150818304820160011c9150818304820160011c9150818304820160011c9150818304820160011c9150818304820160011c91508182840410156115155781830491505b50919050565b606060006115288561060d565b60405160200161153891906136a9565b6040516020818303038152906040529050611561600a8560ff1661155c9190611b60565b61060d565b611579600a8560ff166115749190611b60565b61060d565b611583600a61060d565b61158d600a61060d565b846040516020016115a2959493929190613897565b6040516020818303038152906040529150509392505050565b6000806115f0856115cb8861060d565b6040516020016115dc929190612179565b604051602081830303815290604052611695565b905083600185856116019190611acc565b61160b91906124c1565b8261161691906127a1565b61162091906124c1565b915050949350505050565b606061164d82600a61163d9190613a57565b846116489190611b2f565b61060d565b61166d83600a61165d9190613a57565b8561166891906127a1565b61060d565b60405160200161167e929190613ac8565b604051602081830303815290604052905092915050565b60006116bf826040516020016116ab9190613afb565b6040516020818303038152906040526116c9565b60001c9050919050565b6000815160208301209050919050565b604051806040016040528060008152602001600081525090565b6000819050919050565b611706816116f3565b82525050565b600060208201905061172160008301846116fd565b92915050565b6000604051905090565b600080fd5b600080fd5b611744816116f3565b811461174f57600080fd5b50565b6000813590506117618161173b565b92915050565b6000806040838503121561177e5761177d611731565b5b600061178c85828601611752565b925050602061179d85828601611752565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156117e15780820151818401526020810190506117c6565b60008484015250505050565b6000601f19601f8301169050919050565b6000611809826117a7565b61181381856117b2565b93506118238185602086016117c3565b61182c816117ed565b840191505092915050565b6000602082019050818103600083015261185181846117fe565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611896826117ed565b810181811067ffffffffffffffff821117156118b5576118b461185e565b5b80604052505050565b60006118c8611727565b90506118d4828261188d565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff8211156119035761190261185e565b5b61190c826117ed565b9050602081019050919050565b82818337600083830152505050565b600061193b611936846118e8565b6118be565b905082815260208101848484011115611957576119566118e3565b5b611962848285611919565b509392505050565b600082601f83011261197f5761197e6118de565b5b813561198f848260208601611928565b91505092915050565b600060c082840312156119ae576119ad611859565b5b6119b860c06118be565b905060006119c884828501611752565b60008301525060206119dc84828501611752565b60208301525060406119f084828501611752565b6040830152506060611a0484828501611752565b6060830152506080611a1884828501611752565b60808301525060a082013567ffffffffffffffff811115611a3c57611a3b6118d9565b5b611a488482850161196a565b60a08301525092915050565b600060208284031215611a6a57611a69611731565b5b600082013567ffffffffffffffff811115611a8857611a87611736565b5b611a9484828501611998565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ad7826116f3565b9150611ae2836116f3565b9250828203905081811115611afa57611af9611a9d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611b3a826116f3565b9150611b45836116f3565b925082611b5557611b54611b00565b5b828204905092915050565b6000611b6b826116f3565b9150611b76836116f3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611baf57611bae611a9d565b5b828202905092915050565b600081905092915050565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323060008201527f30302f737667222076696577426f783d22302030200000000000000000000000602082015250565b6000611c21603583611bba565b9150611c2c82611bc5565b603582019050919050565b6000611c42826117a7565b611c4c8185611bba565b9350611c5c8185602086016117c3565b80840191505092915050565b7f2000000000000000000000000000000000000000000000000000000000000000815250565b7f222077696474683d2235303022206865696768743d22353030223e0000000000815250565b6000611cbf82611c14565b9150611ccb8285611c37565b9150611cd682611c68565b600182019150611ce68284611c37565b9150611cf182611c8e565b601b820191508190509392505050565b7f3c7374796c653e00000000000000000000000000000000000000000000000000815250565b7f3c2f7374796c653e000000000000000000000000000000000000000000000000815250565b6000611d5882611d01565b600782019150611d688284611c37565b9150611d7382611d27565b60088201915081905092915050565b7f3c646566733e0000000000000000000000000000000000000000000000000000815250565b6000611db48285611c37565b9150611dbf82611d82565b600682019150611dcf8284611c37565b91508190509392505050565b7f3c672069643d2265646765223e00000000000000000000000000000000000000815250565b7f3c2f673e00000000000000000000000000000000000000000000000000000000815250565b6000611e3282611ddb565b600d82019150611e428284611c37565b9150611e4d82611e01565b60048201915081905092915050565b7f3c672069643d2266756c6c223e00000000000000000000000000000000000000815250565b6000611e8e8285611c37565b9150611e9982611e5c565b600d82019150611ea98284611c37565b91508190509392505050565b7f3c75736520687265663d22236564676522207472616e73666f726d3d2273636160008201527f6c65282d312c31292c7472616e736c617465282d000000000000000000000000602082015250565b6000611f11603483611bba565b9150611f1c82611eb5565b603482019050919050565b7f2c302922202f3e00000000000000000000000000000000000000000000000000815250565b6000611f598285611c37565b9150611f6482611f04565b9150611f708284611c37565b9150611f7b82611f27565b6007820191508190509392505050565b7f3c75736520687265663d22236564676522207472616e73666f726d3d2273636160008201527f6c6528312c2d31292c7472616e736c61746528302c2d00000000000000000000602082015250565b6000611fe7603683611bba565b9150611ff282611f8b565b603682019050919050565b7f2922202f3e000000000000000000000000000000000000000000000000000000815250565b600061202f8285611c37565b915061203a82611fda565b91506120468284611c37565b915061205182611ffd565b6005820191508190509392505050565b7f3c75736520687265663d22236564676522207472616e73666f726d3d2273636160008201527f6c65282d312c2d31292c7472616e736c617465282d0000000000000000000000602082015250565b60006120bd603583611bba565b91506120c882612061565b603582019050919050565b7f2c2d000000000000000000000000000000000000000000000000000000000000815250565b7f2922202f3e3c2f673e0000000000000000000000000000000000000000000000815250565b600061212b8286611c37565b9150612136826120b0565b91506121428285611c37565b915061214d826120d3565b60028201915061215d8284611c37565b9150612168826120f9565b600982019150819050949350505050565b60006121858285611c37565b91506121918284611c37565b91508190509392505050565b7f3c2f646566733e00000000000000000000000000000000000000000000000000815250565b60006121cf8284611c37565b91506121da8261219d565b60078201915081905092915050565b7f3c7265637420783d22302220793d2230222077696474683d2200000000000000815250565b7f22206865696768743d2200000000000000000000000000000000000000000000815250565b7f222066696c6c3d22626c61636b222f3e00000000000000000000000000000000815250565b60006122678286611c37565b9150612272826121e9565b6019820191506122828285611c37565b915061228d8261220f565b600a8201915061229d8284611c37565b91506122a882612235565b601082019150819050949350505050565b7f3c672069643d226261636b67726f756e64223e00000000000000000000000000815250565b60006122eb8285611c37565b91506122f6826122b9565b6013820191506123068284611c37565b915061231182611e01565b6004820191508190509392505050565b7f3c726563742066696c6c3d22626c61636b2220783d2200000000000000000000815250565b7f2220793d22000000000000000000000000000000000000000000000000000000815250565b7f222077696474683d220000000000000000000000000000000000000000000000815250565b7f2220206865696768743d22000000000000000000000000000000000000000000815250565b7f22202f3e00000000000000000000000000000000000000000000000000000000815250565b60006123eb8288611c37565b91506123f682612321565b6016820191506124068287611c37565b915061241182612347565b6005820191506124218286611c37565b915061242c8261236d565b60098201915061243c8285611c37565b915061244782612393565b600b820191506124578284611c37565b9150612462826123b9565b6004820191508190509695505050505050565b7f3c75736520687265663d222366756c6c22202f3e000000000000000000000000815250565b60006124a78284611c37565b91506124b282612475565b60148201915081905092915050565b60006124cc826116f3565b91506124d7836116f3565b92508282019050808211156124ef576124ee611a9d565b5b92915050565b7f3c75736520687265663d22237370656369616c22207472616e73666f726d3d2260008201527f7472616e736c6174652800000000000000000000000000000000000000000000602082015250565b6000612551602a83611bba565b915061255c826124f5565b602a82019050919050565b7f2c00000000000000000000000000000000000000000000000000000000000000815250565b7f3c75736520687265663d22237370656369616c22207472616e73666f726d3d2260008201527f7363616c65282d312c31292c7472616e736c617465282d000000000000000000602082015250565b60006125e9603783611bba565b91506125f48261258d565b603782019050919050565b600061260b8288611c37565b915061261682612544565b91506126228287611c37565b915061262d82612567565b60018201915061263d8286611c37565b915061264882611ffd565b600582019150612657826125dc565b91506126638285611c37565b915061266e82612567565b60018201915061267e8284611c37565b915061268982611ffd565b6005820191508190509695505050505050565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000815250565b60006126ce8284611c37565b91506126d98261269c565b60068201915081905092915050565b60006126f3826116f3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361272557612724611a9d565b5b600182019050919050565b600060ff82169050919050565b600061274882612730565b915061275383612730565b9250828201905060ff81111561276c5761276b611a9d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006127ac826116f3565b91506127b7836116f3565b9250826127c7576127c6611b00565b5b828206905092915050565b6127db816116f3565b82525050565b60006020820190506127f660008301846127d2565b92915050565b600067ffffffffffffffff8211156128175761281661185e565b5b602082029050919050565b600080fd5b6000815190506128368161173b565b92915050565b600061284f61284a846127fc565b6118be565b9050806020840283018581111561286957612868612822565b5b835b81811015612892578061287e8882612827565b84526020840193505060208101905061286b565b5050509392505050565b600082601f8301126128b1576128b06118de565b5b60036128be84828561283c565b91505092915050565b6000606082840312156128dd576128dc611731565b5b60006128eb8482850161289c565b91505092915050565b600060039050919050565b600081905092915050565b6000819050919050565b61291d816116f3565b82525050565b600061292f8383612914565b60208301905092915050565b6000602082019050919050565b612951816128f4565b61295b81846128ff565b92506129668261290a565b8060005b8381101561299757815161297e8782612923565b96506129898361293b565b92505060018101905061296a565b505050505050565b60006060820190506129b46000830184612948565b92915050565b60006129cd6129c8846118e8565b6118be565b9050828152602081018484840111156129e9576129e86118e3565b5b6129f48482856117c3565b509392505050565b600082601f830112612a1157612a106118de565b5b8151612a218482602086016129ba565b91505092915050565b600060208284031215612a4057612a3f611731565b5b600082015167ffffffffffffffff811115612a5e57612a5d611736565b5b612a6a848285016129fc565b91505092915050565b7f2e706978656c2d00000000000000000000000000000000000000000000000000815250565b7f207b66696c6c3a00000000000000000000000000000000000000000000000000815250565b7f3b7d200000000000000000000000000000000000000000000000000000000000815250565b6000612af18286611c37565b9150612afc82612a73565b600782019150612b0c8285611c37565b9150612b1782612a99565b600782019150612b278284611c37565b9150612b3282612abf565b600382019150819050949350505050565b6000819050919050565b6000612b5882612b43565b9150612b6383612b43565b925082612b7357612b72611b00565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615612bac57612bab611a9d565b5b828205905092915050565b6000612bc282612b43565b9150612bcd83612b43565b9250828203905081811260008412168282136000851215161715612bf457612bf3611a9d565b5b92915050565b6000612c0582612b43565b9150612c1083612b43565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615612c4f57612c4e611a9d565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615612c8c57612c8b611a9d565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615612cc957612cc8611a9d565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615612d0657612d05611a9d565b5b828202905092915050565b7f7374617469635800000000000000000000000000000000000000000000000000815250565b6000612d4282612d11565b600782019150612d528284611c37565b915081905092915050565b7f7374617469635900000000000000000000000000000000000000000000000000815250565b6000612d8e82612d5d565b600782019150612d9e8284611c37565b915081905092915050565b7f66696c6c4c696768746e65737300000000000000000000000000000000000000815250565b6000612dda82612da9565b600d82019150612dea8284611c37565b915081905092915050565b7f3c7265637420783d220000000000000000000000000000000000000000000000815250565b7f222066696c6c3d22000000000000000000000000000000000000000000000000815250565b7f222f3e0000000000000000000000000000000000000000000000000000000000815250565b6000612e7282612df5565b600982019150612e828288611c37565b9150612e8d82612347565b600582019150612e9d8287611c37565b9150612ea88261236d565b600982019150612eb88286611c37565b9150612ec38261220f565b600a82019150612ed38285611c37565b9150612ede82612e1b565b600882019150612eee8284611c37565b9150612ef982612e41565b6003820191508190509695505050505050565b7f616e696d61746564537461725800000000000000000000000000000000000000815250565b6000612f3d82612f0c565b600d82019150612f4d8284611c37565b915081905092915050565b7f616e696d61746564537461725900000000000000000000000000000000000000815250565b6000612f8982612f58565b600d82019150612f998284611c37565b915081905092915050565b7f616e696d6174696f6e4f66667365740000000000000000000000000000000000815250565b6000612fd582612fa4565b600f82019150612fe58284611c37565b915081905092915050565b7f6475723d22000000000000000000000000000000000000000000000000000000815250565b7f732220726570656174436f756e743d22696e646566696e69746522206265676960008201527f6e3d220000000000000000000000000000000000000000000000000000000000602082015250565b6000613072602383611bba565b915061307d82613016565b602382019050919050565b7f73222063616c634d6f64653d2273706c696e6522206b657954696d65733d223060008201527f3b3122206b657953706c696e65733d22302e342c302c302e322c312200000000602082015250565b60006130e4603c83611bba565b91506130ef82613088565b603c82019050919050565b600061310582612ff0565b6005820191506131158285611c37565b915061312082613065565b915061312c8284611c37565b9150613137826130d7565b91508190509392505050565b7f3c616e696d617465206174747269627574654e616d653d2278222066726f6d3d60008201527f2200000000000000000000000000000000000000000000000000000000000000602082015250565b600061319f602183611bba565b91506131aa82613143565b602182019050919050565b7f2220746f3d220000000000000000000000000000000000000000000000000000815250565b7f222076616c7565733d2200000000000000000000000000000000000000000000815250565b7f3b00000000000000000000000000000000000000000000000000000000000000815250565b7f2220000000000000000000000000000000000000000000000000000000000000815250565b7f2f3e000000000000000000000000000000000000000000000000000000000000815250565b600061327e82613192565b915061328a8288611c37565b9150613295826131b5565b6006820191506132a58287611c37565b91506132b0826131db565b600a820191506132c08286611c37565b91506132cb82613201565b6001820191506132db8285611c37565b91506132e682613227565b6002820191506132f68284611c37565b91506133018261324d565b6002820191508190509695505050505050565b7f3c616e696d617465206174747269627574654e616d653d2279222066726f6d3d60008201527f2200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613370602183611bba565b915061337b82613314565b602182019050919050565b60006133928289611c37565b915061339d82613363565b91506133a98288611c37565b91506133b4826131b5565b6006820191506133c48287611c37565b91506133cf826131db565b600a820191506133df8286611c37565b91506133ea82613201565b6001820191506133fa8285611c37565b915061340582613227565b6002820191506134158284611c37565b91506134208261324d565b600282019150819050979650505050505050565b7f3c616e696d617465206174747269627574654e616d653d2266696c6c2d6f706160008201527f63697479222066726f6d3d22312220746f3d2230222076616c7565733d22313b60208201527f3022200000000000000000000000000000000000000000000000000000000000604082015250565b60006134b6604383611bba565b91506134c182613434565b604382019050919050565b60006134d88285611c37565b91506134e3826134a9565b91506134ef8284611c37565b91506134fa8261324d565b6002820191508190509392505050565b7f223e000000000000000000000000000000000000000000000000000000000000815250565b7f3c2f726563743e00000000000000000000000000000000000000000000000000815250565b600061356182612df5565b6009820191506135718289611c37565b915061357c82612347565b60058201915061358c8288611c37565b91506135978261236d565b6009820191506135a78287611c37565b91506135b28261220f565b600a820191506135c28286611c37565b91506135cd82612e1b565b6008820191506135dd8285611c37565b91506135e88261350a565b6002820191506135f88284611c37565b915061360382613530565b600782019150819050979650505050505050565b7f736c6963696e67206f7574206f662072616e6765000000000000000000000000600082015250565b600061364d6014836117b2565b915061365882613617565b602082019050919050565b6000602082019050818103600083015261367c81613640565b9050919050565b7f706978656c2d0000000000000000000000000000000000000000000000000000815250565b60006136b482613683565b6006820191506136c48284611c37565b915081905092915050565b7f3c7265637420783d220000000000000000000000000000000000000000000000600082015250565b6000613705600983611bba565b9150613710826136cf565b600982019050919050565b7f2220793d22000000000000000000000000000000000000000000000000000000600082015250565b6000613751600583611bba565b915061375c8261371b565b600582019050919050565b7f222077696474683d220000000000000000000000000000000000000000000000600082015250565b600061379d600983611bba565b91506137a882613767565b600982019050919050565b7f22206865696768743d2200000000000000000000000000000000000000000000600082015250565b60006137e9600a83611bba565b91506137f4826137b3565b600a82019050919050565b7f2220636c6173733d220000000000000000000000000000000000000000000000600082015250565b6000613835600983611bba565b9150613840826137ff565b600982019050919050565b7f222f3e0000000000000000000000000000000000000000000000000000000000600082015250565b6000613881600383611bba565b915061388c8261384b565b600382019050919050565b60006138a2826136f8565b91506138ae8288611c37565b91506138b982613744565b91506138c58287611c37565b91506138d082613790565b91506138dc8286611c37565b91506138e7826137dc565b91506138f38285611c37565b91506138fe82613828565b915061390a8284611c37565b915061391582613874565b91508190509695505050505050565b60008160011c9050919050565b6000808291508390505b600185111561397b5780860481111561395757613956611a9d565b5b60018516156139665780820291505b808102905061397485613924565b945061393b565b94509492505050565b6000826139945760019050613a50565b816139a25760009050613a50565b81600181146139b857600281146139c2576139f1565b6001915050613a50565b60ff8411156139d4576139d3611a9d565b5b8360020a9150848211156139eb576139ea611a9d565b5b50613a50565b5060208310610133831016604e8410600b8410161715613a265782820a905083811115613a2157613a20611a9d565b5b613a50565b613a338484846001613931565b92509050818404811115613a4a57613a49611a9d565b5b81810290505b9392505050565b6000613a62826116f3565b9150613a6d836116f3565b9250613a9a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613984565b905092915050565b7f2e00000000000000000000000000000000000000000000000000000000000000815250565b6000613ad48285611c37565b9150613adf82613aa2565b600182019150613aef8284611c37565b91508190509392505050565b6000613b078284611c37565b91508190509291505056fe3c672069643d227370656369616c223e3c7061746820643d224d3132302030683130763130682d313056305a2220636c6173733d22706978656c2d33222f3e3c7061746820643d224d3131302030683130763130682d31307a2220636c6173733d22706978656c2d32222f3e3c7061746820643d224d313330203130683130763130682d31305631305a6d2d3430203048307631306839305631305a2220636c6173733d22706978656c2d33222f3e3c7061746820643d224d3134302032304830763130683134307a2220636c6173733d22706978656c2d31222f3e3c7061746820643d224d343020343048307631306834305634305a2220636c6173733d22706978656c2d33222f3e3c7061746820643d224d373020333048307631306837307a6d34302d3230683230763130682d32307a2220636c6173733d22706978656c2d32222f3e3c7061746820643d224d39302032306832305631304839307631305a2220636c6173733d22706978656c2d31222f3e3c7061746820643d224d3133302033304837307631306836305633305a2220636c6173733d22706978656c2d33222f3e3c2f673e02305a05000f05a03700005a01402d05a05001905a03700505a01403705a05002305a03700f05a01410e05a0500fa05a0370e605a01410d0640590fa0560530e603d0180a2646970667358221220c672eddc3daefdc825abce6919fe22b0e8752e08b20597912f036c3430c78bbb64736f6c63430008100033",
  "libraries": {
    "utils": "0xc0B9fc91b9007a8770225FC4c5c93A5f0D0B7904"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}