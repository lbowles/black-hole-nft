{
  "address": "0xa64ef8878946028f8DFAC653d0806B71917a717E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_mergeOpenTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_renderer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_unmigratedBlackHoles",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_voidableBlackHoles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotBlackHolesContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "targetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalMass",
          "type": "uint256"
        }
      ],
      "name": "blackHoleForMass",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "level",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "size",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mass",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "adjustment",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct BlackHole",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "blackHoleForTokenId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "level",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "size",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mass",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "adjustment",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct BlackHole",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "blackHolesForTokenIds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "level",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "size",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mass",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "adjustment",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct BlackHole[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mass",
          "type": "uint256"
        }
      ],
      "name": "getAdjustmentForMass",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUpgradeIntervals",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMergingEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mass",
          "type": "uint256"
        }
      ],
      "name": "levelForMass",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "massForTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "massesConsumed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokens",
          "type": "uint256[]"
        }
      ],
      "name": "merge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mergeOpenTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBlackHoles",
          "name": "blackHoles",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "name": "nameForBlackHoleLevel",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renderer",
      "outputs": [
        {
          "internalType": "contract IRenderer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mergeOpenTimestamp",
          "type": "uint256"
        }
      ],
      "name": "setMergeOpenTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBurned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unmigratedBlackHoles",
      "outputs": [
        {
          "internalType": "contract IBlackHoles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voidableBlackHoles",
      "outputs": [
        {
          "internalType": "contract IBlackHoles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4de961179bf9252978f0d3cad4cb453686a84498e0f39e2489c858819f2844ed",
  "receipt": {
    "to": null,
    "from": "0xCC78016816633528Dd4918746D7F016563Ce27FA",
    "contractAddress": "0xa64ef8878946028f8DFAC653d0806B71917a717E",
    "transactionIndex": 99,
    "gasUsed": "5183707",
    "logsBloom": "0x
    "blockHash": "0x579fc72551679856cce68c09417662e66e66b08694fe3746b96899e8f855c0e7",
    "transactionHash": "0x4de961179bf9252978f0d3cad4cb453686a84498e0f39e2489c858819f2844ed",
    "logs": [
      {
        "transactionIndex": 99,
        "blockNumber": 16715571,
        "transactionHash": "0x4de961179bf9252978f0d3cad4cb453686a84498e0f39e2489c858819f2844ed",
        "address": "0xa64ef8878946028f8DFAC653d0806B71917a717E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cc78016816633528dd4918746d7f016563ce27fa"
        ],
        "data": "0x",
        "logIndex": 171,
        "blockHash": "0x579fc72551679856cce68c09417662e66e66b08694fe3746b96899e8f855c0e7"
      }
    ],
    "blockNumber": 16715571,
    "cumulativeGasUsed": "12717414",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "BlackHolesV2",
    "BLACKHOLESV2",
    "1677487007",
    "0xA811607554419977bb372fA3a2Ec9bBc81575FB4",
    "0x742B809625FB777CC9A332bb61249481FaE59092",
    "0x545015Ea44aa108974c554A809f208d40e8383aD"
  ],
  "numDeployments": 1,
  "solcInputHash": "427cac182baa21319e48c83302b3e3ba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_mergeOpenTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_renderer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_unmigratedBlackHoles\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voidableBlackHoles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBlackHolesContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMass\",\"type\":\"uint256\"}],\"name\":\"blackHoleForMass\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mass\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adjustment\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct BlackHole\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"blackHoleForTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mass\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adjustment\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct BlackHole\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"blackHolesForTokenIds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mass\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adjustment\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct BlackHole[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mass\",\"type\":\"uint256\"}],\"name\":\"getAdjustmentForMass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUpgradeIntervals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMergingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mass\",\"type\":\"uint256\"}],\"name\":\"levelForMass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"massForTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"massesConsumed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"merge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mergeOpenTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBlackHoles\",\"name\":\"blackHoles\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"nameForBlackHoleLevel\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renderer\",\"outputs\":[{\"internalType\":\"contract IRenderer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mergeOpenTimestamp\",\"type\":\"uint256\"}],\"name\":\"setMergeOpenTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unmigratedBlackHoles\",\"outputs\":[{\"internalType\":\"contract IBlackHoles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voidableBlackHoles\",\"outputs\":[{\"internalType\":\"contract IBlackHoles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"blackHoleForMass(uint256,uint256)\":{\"params\":{\"totalMass\":\"mass of tokens to merge.\"},\"returns\":{\"_0\":\"BlackHole struct of new Black Hole.\",\"_1\":\"SVG of new Black Hole.\"}},\"blackHoleForTokenId(uint256)\":{\"params\":{\"_tokenId\":\"ID of the token.\"},\"returns\":{\"_0\":\"BlackHole Structured representation of the token.\"}},\"blackHolesForTokenIds(uint256[])\":{\"params\":{\"tokenIds\":\"List of token IDs.\"}},\"constructor\":{\"details\":\"Constructs a new instance of the contract.\",\"params\":{\"_mergeOpenTimestamp\":\"Timestamp when merging is open.\",\"_name\":\"Name of the ERC721 token.\",\"_renderer\":\"Address of the Renderer contract.\",\"_symbol\":\"Symbol of the ERC721 token.\",\"_unmigratedBlackHoles\":\"Address of Black Holes contract.\"}},\"getAdjustmentForMass(uint256)\":{\"params\":{\"_mass\":\"Mass to calculate the adjustment for.\"},\"returns\":{\"_0\":\"Adjustment.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"merge(uint256[])\":{\"params\":{\"tokens\":\"List of token IDs to merge. The first token in the list is the target.\"}},\"migrate(address,uint256[])\":{\"params\":{\"tokenIds\":\"The Edition token IDs you want to migrate.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"nameForBlackHoleLevel(uint256)\":{\"params\":{\"_level\":\"Level of the black hole.\"},\"returns\":{\"_0\":\"name of the black hole level.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setMergeOpenTimestamp(uint256)\":{\"params\":{\"_mergeOpenTimestamp\":\"Timestamp when merging is open.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"params\":{\"_tokenId\":\"ID of the token to get the URI for.\"},\"returns\":{\"_0\":\"Token URI.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"blackHoleForMass(uint256,uint256)\":{\"notice\":\"Simulates the merge for an array of tokens.\"},\"blackHoleForTokenId(uint256)\":{\"notice\":\"Get the structured representation of a token by its ID.\"},\"blackHolesForTokenIds(uint256[])\":{\"notice\":\"Returns Black Holes for a list of token IDs.\"},\"getAdjustmentForMass(uint256)\":{\"notice\":\"Gets adjustment for a given mass.\"},\"getUpgradeIntervals()\":{\"notice\":\"Returns the mass required to upgrade to the next level for each level.\"},\"isMergingEnabled()\":{\"notice\":\"Returns whether merging is enabled or not.\"},\"levelForMass(uint256)\":{\"notice\":\"Gets the level for a given mass.\"},\"merge(uint256[])\":{\"notice\":\"Merges a list of tokens into a single token.\"},\"migrate(address,uint256[])\":{\"notice\":\"Migrate Black Holes to Voidable Black Holes by burning the Black Holes.         Requires the Approval of this contract on the Edition contract.\"},\"nameForBlackHoleLevel(uint256)\":{\"notice\":\"Returns the name of a black hole level.\"},\"setMergeOpenTimestamp(uint256)\":{\"notice\":\"Sets the merging delay.\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the token URI for a given token ID.\"},\"totalBurned()\":{\"notice\":\"Returns total number of tokens burned.\"},\"totalMinted()\":{\"notice\":\"Returns total number of tokens minted.\"},\"totalSupply()\":{\"notice\":\"Returns how many tokens this contract manages.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BlackHolesV2.sol\":\"BlackHolesV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/BlackHolesV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*                                                                                                                                                                                                                                          \\n                                                         ........................                                                           \\n                                                   .....*22222222222222222222222#......                                                     \\n                                                  ,*****(222222222222222222222222******                                                     \\n                                                ../22222244444444444444444444444422222#...                                                  \\n                                             ..*22222244(                       .444222222...                                               \\n                                          ../22244444(                              44444422#...                                            \\n                                       ../22222244/                                   .444222222...                                         \\n                                       ../22244/                                          444222...                                         \\n                                      .,,(22###*                                          ###222,,,                                         \\n                                    ../22244*                                                444222...                                      \\n                                    ../22244*                                                444222...                                      \\n                                    ../22244*                                                444222...                                      \\n                                   .../22244*                                                444222...                                      \\n                                 ../((#22244*                                                444222(((...                                   \\n                                ...(22222244*                                                44422222#...                                   \\n                             ...(22222244444/...............................................,444444222222...                                \\n                             #444444444444444444444444444444444444444444444444444444444444444444444444444442                                \\n                                 ................./22222222222222222222222222222222222#..................                                   \\n                                       ../22244/            ..................            444222...                                         \\n                                       ../22222(**.                                    ***222222...                                         \\n                                       ../22222244/                                   .444222222...                                         \\n                                          ../22244444(                              44444422#...                                            \\n                                          .....*22222244(                       .444222222...                                               \\n                                                ../22222244444444444444444444444422222#...                                                  \\n                                                   .....*22222222222222222222222#......                                                     \\n                                                   .....*#######################(......                                                     \\n                                                         ........................                                                           \\n                                                                                  \\n                                                                          ,----,   \\n                                                              ,---.    .'   .' \\\\  \\n                                                              /__./|  ,----,'    | \\n                                                        ,---.;  ; |  |    :  .  ; \\n                                                        /___/ \\\\  | |  ;    |.'  /  \\n                                                        \\\\   ;  \\\\ ' |  `----'/  ;   \\n                                                        \\\\   \\\\  \\\\: |    /  ;  /    \\n                                                          ;   \\\\  ' .   ;  /  /-,   \\n                                                          \\\\   \\\\   '  /  /  /.`|   \\n                                                            \\\\   `  ;./__;      :   \\n                                                            :   \\\\ ||   :    .'    \\n                                                              '---\\\" ;   | .'       \\n                                                                    `---'          \\n                                                                                  \\n*/\\n\\npragma solidity ^0.8.12;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC4906} from \\\"./interfaces/ERC4906.sol\\\";\\nimport \\\"./Utilities.sol\\\";\\nimport \\\"./interfaces/IRenderer.sol\\\";\\nimport \\\"./interfaces/BlackHole.sol\\\";\\nimport \\\"svgnft/contracts/Base64.sol\\\";\\nimport \\\"./interfaces/IBlackHoles.sol\\\";\\n\\ncontract BlackHolesV2 is ERC4906, Ownable {\\n  error NotAllowed();\\n  error URIQueryForNonexistentToken();\\n  error NotBlackHolesContract();\\n\\n  uint256 public mergeOpenTimestamp;\\n\\n  mapping(uint256 => uint256) public massesConsumed;\\n\\n  IRenderer public renderer;\\n  IBlackHoles public unmigratedBlackHoles;\\n  IBlackHoles public voidableBlackHoles;\\n\\n  uint256 minted;\\n  uint256 burned;\\n\\n  /**\\n   * @dev Constructs a new instance of the contract.\\n   * @param _name Name of the ERC721 token.\\n   * @param _symbol Symbol of the ERC721 token.\\n   * @param _mergeOpenTimestamp Timestamp when merging is open.\\n   * @param _renderer Address of the Renderer contract.\\n   * @param _unmigratedBlackHoles Address of Black Holes contract.\\n   */\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    uint256 _mergeOpenTimestamp,\\n    address _renderer,\\n    address _unmigratedBlackHoles,\\n    address _voidableBlackHoles\\n  ) ERC4906(_name, _symbol) {\\n    mergeOpenTimestamp = _mergeOpenTimestamp;\\n    renderer = IRenderer(_renderer);\\n    unmigratedBlackHoles = IBlackHoles(_unmigratedBlackHoles);\\n    voidableBlackHoles = IBlackHoles(_voidableBlackHoles);\\n  }\\n\\n  /**\\n   * @notice Sets the merging delay.\\n   * @param _mergeOpenTimestamp Timestamp when merging is open.\\n   */\\n  function setMergeOpenTimestamp(uint256 _mergeOpenTimestamp) external onlyOwner {\\n    mergeOpenTimestamp = _mergeOpenTimestamp;\\n  }\\n\\n  /**\\n   * @notice Returns the token URI for a given token ID.\\n   * @param _tokenId ID of the token to get the URI for.\\n   * @return Token URI.\\n   */\\n  function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\\n    if (!_exists(_tokenId)) revert URIQueryForNonexistentToken();\\n\\n    string memory name = string(abi.encodePacked(\\\"BlackHole #\\\", utils.uint2str(_tokenId)));\\n    string\\n      memory description = \\\"Fully on-chain, procedurally generated, animated black holes. Beyond the event horizon.\\\";\\n\\n    BlackHole memory blackHole = blackHoleForTokenId(_tokenId);\\n\\n    string memory svg = renderer.getBlackHoleSVG(blackHole);\\n\\n    string memory attributes = string.concat(\\n      \\\"[\\\",\\n      '{\\\"trait_type\\\": \\\"Level\\\", \\\"value\\\": ',\\n      utils.uint2str(blackHole.level),\\n      \\\"},\\\",\\n      '{\\\"trait_type\\\": \\\"Name\\\", \\\"value\\\": \\\"',\\n      blackHole.name,\\n      '\\\"},',\\n      '{\\\"trait_type\\\": \\\"Mass\\\", \\\"value\\\": ',\\n      utils.uint2str(blackHole.mass),\\n      \\\"}]\\\"\\n    );\\n\\n    string memory json = string(\\n      abi.encodePacked(\\n        '{\\\"name\\\":\\\"',\\n        name,\\n        '\\\",\\\"description\\\":\\\"',\\n        description,\\n        '\\\",',\\n        '\\\"attributes\\\": ',\\n        attributes, // attributes\\n        ', \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n        Base64.encode(bytes(svg)),\\n        '\\\"}'\\n      )\\n    );\\n    return string(abi.encodePacked(\\\"data:application/json;base64,\\\", Base64.encode(bytes(json))));\\n  }\\n\\n  /**\\n   * @notice Get the structured representation of a token by its ID.\\n   * @param _tokenId ID of the token.\\n   * @return BlackHole Structured representation of the token.\\n   */\\n  function blackHoleForTokenId(uint256 _tokenId) public view returns (BlackHole memory) {\\n    uint256 mass = massForTokenId(_tokenId);\\n    uint256 level = levelForMass(mass);\\n    string memory name = nameForBlackHoleLevel(level);\\n    uint256 adjustment = getAdjustmentForMass(mass);\\n\\n    return\\n      BlackHole({\\n        tokenId: _tokenId,\\n        level: level,\\n        size: renderer.PIXELS_PER_SIDE() / 2 - (10 - level),\\n        mass: mass,\\n        name: name,\\n        adjustment: adjustment\\n      });\\n  }\\n\\n  /**\\n   * @notice Gets adjustment for a given mass.\\n   * @param _mass Mass to calculate the adjustment for.\\n   * @return Adjustment.\\n   */\\n  function getAdjustmentForMass(uint256 _mass) public view returns (uint256) {\\n    uint256 level = levelForMass(_mass); // 1\\n\\n    if (level == unmigratedBlackHoles.MAX_LEVEL()) {\\n      return 0;\\n    }\\n\\n    int256 maxAdjustment = 20;\\n    int256 adjustment = 0;\\n    uint256[] memory upgradeIntervals = getUpgradeIntervals();\\n\\n    if (level == 0) {\\n      adjustment = (-maxAdjustment * int256(_mass - 1)) / int256(upgradeIntervals[0] - 2) + maxAdjustment;\\n    } else {\\n      adjustment =\\n        (-maxAdjustment * int256(_mass - upgradeIntervals[level - 1])) /\\n        int256(upgradeIntervals[level] - upgradeIntervals[level - 1] - 1) +\\n        maxAdjustment;\\n    }\\n\\n    return uint256(adjustment);\\n  }\\n\\n  /**\\n   * @notice Gets the level for a given mass.\\n   */\\n  function levelForMass(uint256 _mass) public view returns (uint256) {\\n    uint256[] memory upgradeIntervals = getUpgradeIntervals();\\n\\n    if (_mass < upgradeIntervals[0]) {\\n      return 0;\\n    } else if (_mass < upgradeIntervals[1]) {\\n      return 1;\\n    } else if (_mass < upgradeIntervals[2]) {\\n      return 2;\\n    } else if (_mass < upgradeIntervals[3]) {\\n      return 3;\\n    } else {\\n      return 4;\\n    }\\n  }\\n\\n  function massForTokenId(uint256 _tokenId) public view returns (uint256) {\\n    return massesConsumed[_tokenId] + 1;\\n  }\\n\\n  /**\\n   * @notice Returns the mass required to upgrade to the next level for each level.\\n   */\\n  function getUpgradeIntervals() public view returns (uint256[] memory) {\\n    uint256 baseUpgradeMass = utils.max(\\n      unmigratedBlackHoles.totalMinted() /\\n        unmigratedBlackHoles.MAX_SUPPLY_OF_INTERSTELLAR() /\\n        2**(unmigratedBlackHoles.MAX_LEVEL() - 1),\\n      2\\n    );\\n    uint256[] memory intervals = new uint256[](unmigratedBlackHoles.MAX_LEVEL() + 1);\\n    intervals[0] = 5;\\n    intervals[1] = baseUpgradeMass * 2;\\n    intervals[2] = baseUpgradeMass * 3;\\n    intervals[3] = baseUpgradeMass * 8;\\n    return intervals;\\n  }\\n\\n  /**\\n   * @notice Returns the name of a black hole level.\\n   * @param _level Level of the black hole.\\n   * @return name of the black hole level.\\n   */\\n  function nameForBlackHoleLevel(uint256 _level) public view returns (string memory) {\\n    return unmigratedBlackHoles.nameForBlackHoleLevel(_level);\\n  }\\n\\n  /**\\n   * @notice Migrate Black Holes to Voidable Black Holes by burning the Black Holes.\\n   *         Requires the Approval of this contract on the Edition contract.\\n   * @param tokenIds The Edition token IDs you want to migrate.\\n   */\\n  function migrate(IBlackHoles blackHoles, uint256[] memory tokenIds) public {\\n    if (!(address(blackHoles) == address(unmigratedBlackHoles) || address(blackHoles) == address(voidableBlackHoles))) {\\n      revert NotBlackHolesContract();\\n    }\\n\\n    uint256 count = tokenIds.length;\\n\\n    // Burn the Black Holes for the given tokenIds & mint the Voidable Black Holes.\\n    for (uint256 i; i < count; ) {\\n      uint256 id = tokenIds[i];\\n      address owner = blackHoles.ownerOf(id);\\n\\n      // Check whether we're allowed to migrate this Black Hole.\\n      if (\\n        owner != msg.sender &&\\n        (!blackHoles.isApprovedForAll(owner, msg.sender)) &&\\n        blackHoles.getApproved(id) != msg.sender\\n      ) {\\n        revert NotAllowed();\\n      }\\n\\n      // Copy mass.\\n      massesConsumed[id] = blackHoles.massForTokenId(id) - 1;\\n\\n      // Burn old.\\n      blackHoles.transferFrom(owner, address(1), id);\\n\\n      // Mint new.\\n      _safeMint(msg.sender, id);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    // Keep track of how many checks have been minted.\\n    minted += count;\\n  }\\n\\n  /**\\n   * @notice Returns whether merging is enabled or not.\\n   */\\n  function isMergingEnabled() public view returns (bool) {\\n    return block.timestamp > mergeOpenTimestamp;\\n  }\\n\\n  /**\\n   * @notice Simulates the merge for an array of tokens.\\n   * @param totalMass mass of tokens to merge.\\n   * @return BlackHole struct of new Black Hole.\\n   * @return SVG of new Black Hole.\\n   */\\n  function blackHoleForMass(uint256 targetId, uint256 totalMass) public view returns (BlackHole memory, string memory) {\\n    uint256 mass = totalMass;\\n    uint256 level = levelForMass(mass);\\n    string memory name = nameForBlackHoleLevel(level);\\n    uint256 adjustment = getAdjustmentForMass(mass);\\n\\n    BlackHole memory blackHole = BlackHole({\\n      tokenId: targetId,\\n      level: level,\\n      size: renderer.PIXELS_PER_SIDE() / 2 - (10 - level),\\n      mass: mass,\\n      name: name,\\n      adjustment: adjustment\\n    });\\n\\n    return (blackHole, renderer.getBlackHoleSVG(blackHole));\\n  }\\n\\n  /**\\n   * @notice Merges a list of tokens into a single token.\\n   * @param tokens List of token IDs to merge. The first token in the list is the target.\\n   */\\n  function merge(uint256[] memory tokens) public {\\n    // Burn all tokens except the first one, aka the target\\n    // The mass of all other tokens get added to the target\\n    require(isMergingEnabled(), \\\"Merging not enabled\\\");\\n    require(tokens.length > 1, \\\"Must merge at least 2 tokens\\\");\\n\\n    uint256 targetId = tokens[0];\\n\\n    require(ownerOf(tokens[0]) == msg.sender, \\\"Must own all tokens (target)\\\");\\n\\n    uint256 sum;\\n    for (uint256 i = 1; i < tokens.length; ) {\\n      require(ownerOf(tokens[i]) == msg.sender, \\\"Must own all tokens (burn)\\\");\\n      sum = sum + massForTokenId(tokens[i]);\\n      _burn(tokens[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    burned += uint32(tokens.length - 1);\\n\\n    massesConsumed[targetId] += sum;\\n\\n    emit MetadataUpdate(targetId);\\n  }\\n\\n  /**\\n   * @notice Returns Black Holes for a list of token IDs.\\n   * @param tokenIds List of token IDs.\\n   */\\n  function blackHolesForTokenIds(uint256[] memory tokenIds) public view returns (BlackHole[] memory) {\\n    BlackHole[] memory blackHoles = new BlackHole[](tokenIds.length);\\n    for (uint256 i = 0; i < tokenIds.length; i++) {\\n      blackHoles[i] = blackHoleForTokenId(tokenIds[i]);\\n    }\\n    return blackHoles;\\n  }\\n\\n  /**\\n   * @notice Returns total number of tokens minted.\\n   */\\n  function totalMinted() external view returns (uint256) {\\n    return minted;\\n  }\\n\\n  /**\\n   * @notice Returns total number of tokens burned.\\n   */\\n  function totalBurned() external view returns (uint256) {\\n    return burned;\\n  }\\n\\n  /**\\n   * @notice Returns how many tokens this contract manages.\\n   */\\n  function totalSupply() public view returns (uint256) {\\n    return minted - burned;\\n  }\\n}\\n\",\"keccak256\":\"0x2a2525ee35a3a49d0dfbe977cfcd7809bfe7afc167ad5b370fca25e5ce24c3e1\",\"license\":\"MIT\"},\"contracts/Utilities.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\n/*                          \\n                                .................                               \\n                          ......22222222222222222......                         \\n                       ......22244444444444444444222.....                       \\n                       ...222444444           444444222..                       \\n                    ...222444444                 44444422*..                    \\n                    ...222444                       44422*..                    \\n                    ...222444                       44422*..                    \\n                    ...222444                       44422*..                    \\n                    ...222444                       44422*..                    \\n                    ...222444                       44422*..                    \\n                    ...222444444                 44444422*..                    \\n                       ...222444444           444444222..                       \\n                       ......22244444444444444444222.....                       \\n                          ......22222222222222222......                         \\n                                .................\\n*/\\npragma solidity ^0.8.12;\\n\\nlibrary utils {\\n  function assemblyKeccak(bytes memory _input) public pure returns (bytes32 x) {\\n    assembly {\\n      x := keccak256(add(_input, 0x20), mload(_input))\\n    }\\n  }\\n\\n  function random(string memory input) internal pure returns (uint256) {\\n    return uint256(assemblyKeccak(abi.encodePacked(input)));\\n  }\\n\\n  function randomRange(\\n    uint256 tokenId,\\n    string memory keyPrefix,\\n    uint256 lower,\\n    uint256 upper\\n  ) internal pure returns (uint256) {\\n    uint256 rand = random(string(abi.encodePacked(keyPrefix, uint2str(tokenId))));\\n    return (rand % (upper - lower + 1)) + lower;\\n  }\\n\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\\n    require(bs.length >= start + 32, \\\"slicing out of range\\\");\\n    uint256 x;\\n    assembly {\\n      x := mload(add(bs, add(0x20, start)))\\n    }\\n    return x;\\n  }\\n\\n  // function getHslString(HSL memory _hsl) public pure returns (string memory) {\\n  //   return string(abi.encodePacked(\\\"hsl(\\\", uint2str(_hsl.h), \\\",\\\", uint2str(_hsl.s), \\\"%,\\\", uint2str(_hsl.l), \\\"%)\\\"));\\n  // }\\n\\n  // function getHslString(\\n  //   uint256 _h,\\n  //   uint256 _s,\\n  //   uint256 _l\\n  // ) public pure returns (string memory) {\\n  //   return string(abi.encodePacked(\\\"hsl(\\\", uint2str(_h), \\\",\\\", uint2str(_s), \\\"%,\\\", uint2str(_l), \\\"%)\\\"));\\n  // }\\n\\n  function getHslString(uint256[3] memory _hsl) public pure returns (string memory) {\\n    return string(abi.encodePacked(\\\"hsl(\\\", uint2str(_hsl[0]), \\\",\\\", uint2str(_hsl[1]), \\\"%,\\\", uint2str(_hsl[2]), \\\"%)\\\"));\\n  }\\n\\n  function getHslString(uint256 _packedHsl) public pure returns (string memory) {\\n    // 3 colors per level, 3 color items per color, H/S/L are color items, 3 bytes each\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"hsl(\\\",\\n          uint2str((_packedHsl >> (12 * 2)) & 0xFFF),\\n          \\\",\\\",\\n          uint2str((_packedHsl >> (12 * 1)) & 0xFFF),\\n          \\\"%,\\\",\\n          uint2str((_packedHsl >> (12 * 0)) & 0xFFF),\\n          \\\"%)\\\"\\n        )\\n      );\\n  }\\n\\n  function unpackHsl(uint256 _packedHsl) public pure returns (uint256[3] memory) {\\n    return [(_packedHsl >> (12 * 2)) & 0xFFF, (_packedHsl >> (12 * 1)) & 0xFFF, (_packedHsl >> (12 * 0)) & 0xFFF];\\n  }\\n\\n  function uint2floatstr(uint256 _i_scaled, uint256 _decimals) internal pure returns (string memory) {\\n    return string.concat(uint2str(_i_scaled / (10**_decimals)), \\\".\\\", uint2str(_i_scaled % (10**_decimals)));\\n  }\\n\\n  function int2str(int256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i < 0) {\\n      return string.concat(\\\"-\\\", uint2str(uint256(-_i)));\\n    } else {\\n      return uint2str(uint256(_i));\\n    }\\n  }\\n\\n  // converts an unsigned integer to a string\\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len;\\n    while (_i != 0) {\\n      k = k - 1;\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n      bytes1 b1 = bytes1(temp);\\n      bstr[k] = b1;\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n\\n  function sqrt(uint256 x) internal pure returns (uint256 z) {\\n    assembly {\\n      // This segment is to get a reasonable initial estimate for the Babylonian method.\\n      // If the initial estimate is bad, the number of correct bits increases ~linearly\\n      // each iteration instead of ~quadratically.\\n      // The idea is to get z*z*y within a small factor of x.\\n      // More iterations here gets y in a tighter range. Currently, we will have\\n      // y in [256, 256*2^16). We ensure y>= 256 so that the relative difference\\n      // between y and y+1 is small. If x < 256 this is not possible, but those cases\\n      // are easy enough to verify exhaustively.\\n      z := 181 // The 'correct' value is 1, but this saves a multiply later\\n      let y := x\\n      // Note that we check y>= 2^(k + 8) but shift right by k bits each branch,\\n      // this is to ensure that if x >= 256, then y >= 256.\\n      if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n        y := shr(128, y)\\n        z := shl(64, z)\\n      }\\n      if iszero(lt(y, 0x1000000000000000000)) {\\n        y := shr(64, y)\\n        z := shl(32, z)\\n      }\\n      if iszero(lt(y, 0x10000000000)) {\\n        y := shr(32, y)\\n        z := shl(16, z)\\n      }\\n      if iszero(lt(y, 0x1000000)) {\\n        y := shr(16, y)\\n        z := shl(8, z)\\n      }\\n      // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8),\\n      // and either y >= 256, or x < 256.\\n      // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n      // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of x, or about 20bps.\\n\\n      // The estimate sqrt(x) = (181/1024) * (x+1) is off by a factor of ~2.83 both when x=1\\n      // and when x = 256 or 1/256. In the worst case, this needs seven Babylonian iterations.\\n      z := shr(18, mul(z, add(y, 65536))) // A multiply is saved from the initial z := 181\\n\\n      // Run the Babylonian method seven times. This should be enough given initial estimate.\\n      // Possibly with a quadratic/cubic polynomial above we could get 4-6.\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n\\n      // See https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division.\\n      // If x+1 is a perfect square, the Babylonian method cycles between\\n      // floor(sqrt(x)) and ceil(sqrt(x)). This check ensures we return floor.\\n      // The solmate implementation assigns zRoundDown := div(x, z) first, but\\n      // since this case is rare, we choose to save gas on the assignment and\\n      // repeat division in the rare case.\\n      // If you don't care whether floor or ceil is returned, you can skip this.\\n      if lt(div(x, z), z) {\\n        z := div(x, z)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xfc9202784d579579f571e25b52d72e6014042da48cd61fd3ae81a8b33f8a9f68\",\"license\":\"MIT\"},\"contracts/interfaces/BlackHole.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nstruct BlackHole {\\n  uint256 tokenId;\\n  uint256 level;\\n  uint256 size;\\n  uint256 mass;\\n  uint256 adjustment;\\n  string name;\\n}\\n\",\"keccak256\":\"0x74aa9fbaa733f9f6407f9f7c73d96a374efcc4783a7f54e6ad42b3850fd26e0b\",\"license\":\"MIT\"},\"contracts/interfaces/ERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"./RefIERC4906.sol\\\";\\n\\ncontract ERC4906 is ERC721, IERC4906 {\\n  constructor(string memory name_, string memory symbol_) ERC721(name_, symbol_) {}\\n\\n  /// @dev See {IERC165-supportsInterface}.\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n    return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n  }\\n}\\n\",\"keccak256\":\"0xe2d0045038c3abc1596ec900238b1e76ec029a0b51a29b5326aba8bc83986e65\",\"license\":\"CC0-1.0\"},\"contracts/interfaces/IBlackHoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./BlackHole.sol\\\";\\n\\ninterface IBlackHoles is IERC721 {\\n  function blackHoleForTokenId(uint256 _tokenId) external view returns (BlackHole memory);\\n\\n  function merge(uint256[] memory tokens) external;\\n\\n  function massForTokenId(uint256 _tokenId) external view returns (uint256);\\n\\n  function burn(uint256 _tokenId) external;\\n\\n  function totalMinted() external view returns (uint256);\\n\\n  function MAX_SUPPLY_OF_INTERSTELLAR() external view returns (uint256);\\n\\n  function MAX_LEVEL() external view returns (uint256);\\n\\n  function nameForBlackHoleLevel(uint256 _level) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xcf1e2a200222c79df4093801c1ad9fe5b47f7a3949fac75bc3ab534c6287c57a\",\"license\":\"MIT\"},\"contracts/interfaces/IRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"./BlackHole.sol\\\";\\n\\ninterface IRenderer {\\n  function PIXELS_PER_SIDE() external view returns (uint256);\\n\\n  function getBlackHoleSVG(BlackHole memory _blackHole) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x688624268d3af737afadcaed2471d79c2d3a9d78762a04d1259eee18d8f20c2b\",\"license\":\"MIT\"},\"contracts/interfaces/RefIERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n  /// @dev This event emits when the metadata of a token is changed.\\n  /// So that the third-party platforms such as NFT market could\\n  /// timely update the images and related attributes of the NFT.\\n  event MetadataUpdate(uint256 _tokenId);\\n\\n  /// @dev This event emits when the metadata of a range of tokens is changed.\\n  /// So that the third-party platforms such as NFT market could\\n  /// timely update the images and related attributes of the NFTs.\\n  event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x091fc9a170e1f9b8a6c192d8fb31e843dd9a548985fab840b2068cfc3ba6f4b1\",\"license\":\"CC0-1.0\"},\"svgnft/contracts/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n  bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n  /// @notice Encodes some bytes to the base64 representation\\n  function encode(bytes memory data) internal pure returns (string memory) {\\n    uint256 len = data.length;\\n    if (len == 0) return \\\"\\\";\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n    // Add some extra buffer at the end\\n    bytes memory result = new bytes(encodedLen + 32);\\n\\n    bytes memory table = TABLE;\\n\\n    assembly {\\n      let tablePtr := add(table, 1)\\n      let resultPtr := add(result, 32)\\n\\n      for {\\n        let i := 0\\n      } lt(i, len) {\\n\\n      } {\\n        i := add(i, 3)\\n        let input := and(mload(add(data, i)), 0xffffff)\\n\\n        let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n        out := shl(224, out)\\n\\n        mstore(resultPtr, out)\\n\\n        resultPtr := add(resultPtr, 4)\\n      }\\n\\n      switch mod(len, 3)\\n      case 1 {\\n        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n      }\\n      case 2 {\\n        mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n      }\\n\\n      mstore(result, encodedLen)\\n    }\\n\\n    return string(result);\\n  }\\n}\\n\",\"keccak256\":\"0xe0cf4b1dfbce881f759d02a1ae0148ed25ca0fd8fd1ca4b14fd58479095b80b8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021c5760003560e01c806389327f2811610125578063c87b56dd116100ad578063d89135cd1161007c578063d89135cd1461068c578063de62d842146106aa578063e985e9c5146106c6578063f224d8ad146106f6578063f2fde38b146107145761021c565b8063c87b56dd146105de578063ca714e5b1461060e578063cbad78491461063e578063cd3fdaab1461066e5761021c565b806395d89b41116100f457806395d89b411461053a578063a22cb46514610558578063a2309ff814610574578063b4449b2614610592578063b88d4fde146105c25761021c565b806389327f28146104b05780638ada6b0f146104e05780638b3578c6146104fe5780638da5cb5b1461051c5761021c565b806342842e0e116101a85780636352211e116101775780636352211e146103fa57806365847f211461042a57806370a0823114610446578063715018a6146104765780637752e368146104805761021c565b806342842e0e146103725780634337baba1461038e578063444269bd146103ac5780635e23a763146103ca5761021c565b8063095ea7b3116101ef578063095ea7b3146102d05780630b56c029146102ec57806318160ddd1461030857806318f58b731461032657806323b872dd146103565761021c565b806301e292571461022157806301ffc9a71461025257806306fdde0314610282578063081812fc146102a0575b600080fd5b61023b6004803603810190610236919061364b565b610730565b6040516102499291906137fd565b60405180910390f35b61026c6004803603810190610267919061388c565b6108fc565b60405161027991906138d4565b60405180910390f35b61028a61095d565b60405161029791906138ef565b60405180910390f35b6102ba60048036038101906102b59190613911565b6109ef565b6040516102c7919061397f565b60405180910390f35b6102ea60048036038101906102e591906139c6565b610a35565b005b61030660048036038101906103019190613911565b610b4c565b005b610310610b5e565b60405161031d9190613a15565b60405180910390f35b610340600480360381019061033b9190613b78565b610b75565b60405161034d9190613d0c565b60405180910390f35b610370600480360381019061036b9190613d2e565b610c3a565b005b61038c60048036038101906103879190613d2e565b610c9a565b005b610396610cba565b6040516103a39190613de0565b60405180910390f35b6103b4610ce0565b6040516103c19190613eaa565b60405180910390f35b6103e460048036038101906103df9190613911565b611069565b6040516103f19190613a15565b60405180910390f35b610414600480360381019061040f9190613911565b611092565b604051610421919061397f565b60405180910390f35b610444600480360381019061043f9190613f0a565b611118565b005b610460600480360381019061045b9190613f66565b611585565b60405161046d9190613a15565b60405180910390f35b61047e61163c565b005b61049a60048036038101906104959190613911565b611650565b6040516104a79190613a15565b60405180910390f35b6104ca60048036038101906104c59190613911565b611668565b6040516104d79190613a15565b60405180910390f35b6104e861185a565b6040516104f59190613fb4565b60405180910390f35b610506611880565b60405161051391906138d4565b60405180910390f35b61052461188c565b604051610531919061397f565b60405180910390f35b6105426118b6565b60405161054f91906138ef565b60405180910390f35b610572600480360381019061056d9190613ffb565b611948565b005b61057c61195e565b6040516105899190613a15565b60405180910390f35b6105ac60048036038101906105a79190613911565b611968565b6040516105b991906138ef565b60405180910390f35b6105dc60048036038101906105d791906140f0565b611a12565b005b6105f860048036038101906105f39190613911565b611a74565b60405161060591906138ef565b60405180910390f35b61062860048036038101906106239190613911565b611c5b565b6040516106359190614173565b60405180910390f35b61065860048036038101906106539190613911565b611d82565b6040516106659190613a15565b60405180910390f35b610676611e4e565b6040516106839190613a15565b60405180910390f35b610694611e54565b6040516106a19190613a15565b60405180910390f35b6106c460048036038101906106bf9190613b78565b611e5e565b005b6106e060048036038101906106db9190614195565b61212c565b6040516106ed91906138d4565b60405180910390f35b6106fe6121c0565b60405161070b9190613de0565b60405180910390f35b61072e60048036038101906107299190613f66565b6121e6565b005b6107386135cb565b60606000839050600061074a82611d82565b9050600061075782611968565b9050600061076484611668565b905060006040518060c001604052808a815260200185815260200185600a61078c9190614204565b6002600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663030ac5256040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081f919061424d565b61082991906142a9565b6108339190614204565b815260200186815260200183815260200184815250905080600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cfeb9a02836040518263ffffffff1660e01b81526004016108a69190614173565b600060405180830381865afa1580156108c3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108ec919061437b565b9650965050505050509250929050565b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610956575061095582612269565b5b9050919050565b60606000805461096c906143f3565b80601f0160208091040260200160405190810160405280929190818152602001828054610998906143f3565b80156109e55780601f106109ba576101008083540402835291602001916109e5565b820191906000526020600020905b8154815290600101906020018083116109c857829003601f168201915b5050505050905090565b60006109fa8261234b565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a4082611092565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ab0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa790614496565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610acf612396565b73ffffffffffffffffffffffffffffffffffffffff161480610afe5750610afd81610af8612396565b61212c565b5b610b3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3490614528565b60405180910390fd5b610b47838361239e565b505050565b610b54612457565b8060078190555050565b6000600d54600c54610b709190614204565b905090565b60606000825167ffffffffffffffff811115610b9457610b93613a35565b5b604051908082528060200260200182016040528015610bcd57816020015b610bba6135cb565b815260200190600190039081610bb25790505b50905060005b8351811015610c3057610bff848281518110610bf257610bf1614548565b5b6020026020010151611c5b565b828281518110610c1257610c11614548565b5b60200260200101819052508080610c2890614577565b915050610bd3565b5080915050919050565b610c4b610c45612396565b826124d5565b610c8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8190614631565b60405180910390fd5b610c9583838361256a565b505050565b610cb583838360405180602001604052806000815250611a12565b505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000610ecd6001600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a49062d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7a919061424d565b610d849190614204565b6002610d909190614784565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635056af056040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e21919061424d565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a2309ff86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb2919061424d565b610ebc91906142a9565b610ec691906142a9565b6002612863565b905060006001600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a49062d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f64919061424d565b610f6e91906147cf565b67ffffffffffffffff811115610f8757610f86613a35565b5b604051908082528060200260200182016040528015610fb55781602001602082028036833780820191505090505b509050600581600081518110610fce57610fcd614548565b5b602002602001018181525050600282610fe79190614803565b81600181518110610ffb57610ffa614548565b5b6020026020010181815250506003826110149190614803565b8160028151811061102857611027614548565b5b6020026020010181815250506008826110419190614803565b8160038151811061105557611054614548565b5b602002602001018181525050809250505090565b60006001600860008481526020019081526020016000205461108b91906147cf565b9050919050565b60008061109e8361287c565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361110f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611106906148a9565b60405180910390fd5b80915050919050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806111c15750600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b6111f7576040517f7615210d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008151905060005b8181101561156657600083828151811061121d5761121c614548565b5b6020026020010151905060008573ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016112629190613a15565b602060405180830381865afa15801561127f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a391906148de565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415801561135a57508573ffffffffffffffffffffffffffffffffffffffff1663e985e9c582336040518363ffffffff1660e01b815260040161131792919061490b565b602060405180830381865afa158015611334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113589190614949565b155b801561140b57503373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1663081812fc846040518263ffffffff1660e01b81526004016113b19190613a15565b602060405180830381865afa1580156113ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f291906148de565b73ffffffffffffffffffffffffffffffffffffffff1614155b15611442576040517f3d693ada00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018673ffffffffffffffffffffffffffffffffffffffff16635e23a763846040518263ffffffff1660e01b815260040161147d9190613a15565b602060405180830381865afa15801561149a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114be919061424d565b6114c89190614204565b60086000848152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff166323b872dd826001856040518463ffffffff1660e01b815260040161151d93929190614976565b600060405180830381600087803b15801561153757600080fd5b505af115801561154b573d6000803e3d6000fd5b5050505061155933836128b9565b8260010192505050611200565b5080600c600082825461157991906147cf565b92505081905550505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ec90614a1f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611644612457565b61164e60006128d7565b565b60086020528060005260406000206000915090505481565b60008061167483611d82565b9050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a49062d46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611707919061424d565b8103611717576000915050611855565b600060149050600080611728610ce0565b905060008403611797578260028260008151811061174957611748614548565b5b602002602001015161175b9190614204565b6001886117689190614204565b8561177290614a49565b61177c9190614a91565b6117869190614ba8565b6117909190614c12565b915061184d565b826001826001876117a89190614204565b815181106117b9576117b8614548565b5b60200260200101518387815181106117d4576117d3614548565b5b60200260200101516117e69190614204565b6117f09190614204565b826001876117fe9190614204565b8151811061180f5761180e614548565b5b6020026020010151886118229190614204565b8561182c90614a49565b6118369190614a91565b6118409190614ba8565b61184a9190614c12565b91505b819450505050505b919050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006007544211905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546118c5906143f3565b80601f01602080910402602001604051908101604052809291908181526020018280546118f1906143f3565b801561193e5780601f106119135761010080835404028352916020019161193e565b820191906000526020600020905b81548152906001019060200180831161192157829003601f168201915b5050505050905090565b61195a611953612396565b838361299d565b5050565b6000600c54905090565b6060600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b4449b26836040518263ffffffff1660e01b81526004016119c59190613a15565b600060405180830381865afa1580156119e2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611a0b919061437b565b9050919050565b611a23611a1d612396565b836124d5565b611a62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5990614631565b60405180910390fd5b611a6e84848484612b09565b50505050565b6060611a7f82612b65565b611ab5576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611ac083612ba6565b604051602001611ad09190614cde565b6040516020818303038152906040529050600060405180608001604052806057815260200161591e6057913990506000611b0985611c5b565b90506000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cfeb9a02836040518263ffffffff1660e01b8152600401611b689190614173565b600060405180830381865afa158015611b85573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611bae919061437b565b90506000611bbf8360200151612ba6565b8360a00151611bd18560600151612ba6565b604051602001611be393929190614ea2565b60405160208183030381529060405290506000858583611c0286612d2e565b604051602001611c159493929190615122565b6040516020818303038152906040529050611c2f81612d2e565b604051602001611c3f91906151ee565b6040516020818303038152906040529650505050505050919050565b611c636135cb565b6000611c6e83611069565b90506000611c7b82611d82565b90506000611c8882611968565b90506000611c9584611668565b90506040518060c0016040528087815260200184815260200184600a611cbb9190614204565b6002600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663030ac5256040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4e919061424d565b611d5891906142a9565b611d629190614204565b815260200185815260200182815260200183815250945050505050919050565b600080611d8d610ce0565b905080600081518110611da357611da2614548565b5b6020026020010151831015611dbc576000915050611e49565b80600181518110611dd057611dcf614548565b5b6020026020010151831015611de9576001915050611e49565b80600281518110611dfd57611dfc614548565b5b6020026020010151831015611e16576002915050611e49565b80600381518110611e2a57611e29614548565b5b6020026020010151831015611e43576003915050611e49565b60049150505b919050565b60075481565b6000600d54905090565b611e66611880565b611ea5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9c9061525c565b60405180910390fd5b6001815111611ee9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ee0906152c8565b60405180910390fd5b600081600081518110611eff57611efe614548565b5b602002602001015190503373ffffffffffffffffffffffffffffffffffffffff16611f4483600081518110611f3757611f36614548565b5b6020026020010151611092565b73ffffffffffffffffffffffffffffffffffffffff1614611f9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9190615334565b60405180910390fd5b600080600190505b8351811015612099573373ffffffffffffffffffffffffffffffffffffffff16611fe5858381518110611fd857611fd7614548565b5b6020026020010151611092565b73ffffffffffffffffffffffffffffffffffffffff161461203b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612032906153a0565b60405180910390fd5b61205e84828151811061205157612050614548565b5b6020026020010151611069565b8261206991906147cf565b915061208e84828151811061208157612080614548565b5b6020026020010151612ec5565b806001019050611fa2565b50600183516120a89190614204565b63ffffffff16600d60008282546120bf91906147cf565b92505081905550806008600084815260200190815260200160002060008282546120e991906147cf565b925050819055507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce78260405161211f9190613a15565b60405180910390a1505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6121ee612457565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361225d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225490615432565b60405180910390fd5b612266816128d7565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061233457507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612344575061234382613013565b5b9050919050565b61235481612b65565b612393576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238a906148a9565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661241183611092565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61245f612396565b73ffffffffffffffffffffffffffffffffffffffff1661247d61188c565b73ffffffffffffffffffffffffffffffffffffffff16146124d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ca9061549e565b60405180910390fd5b565b6000806124e183611092565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806125235750612522818561212c565b5b8061256157508373ffffffffffffffffffffffffffffffffffffffff16612549846109ef565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661258a82611092565b73ffffffffffffffffffffffffffffffffffffffff16146125e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125d790615530565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361264f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612646906155c2565b60405180910390fd5b61265c838383600161307d565b8273ffffffffffffffffffffffffffffffffffffffff1661267c82611092565b73ffffffffffffffffffffffffffffffffffffffff16146126d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126c990615530565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461285e83838360016131a3565b505050565b60008183116128725781612874565b825b905092915050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6128d38282604051806020016040528060008152506131a9565b5050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612a0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a029061562e565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612afc91906138d4565b60405180910390a3505050565b612b1484848461256a565b612b2084848484613204565b612b5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b56906156c0565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff16612b878361287c565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b606060008203612bed576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612d29565b600082905060005b60008214612c1f578080612c0890614577565b915050600a82612c1891906142a9565b9150612bf5565b60008167ffffffffffffffff811115612c3b57612c3a613a35565b5b6040519080825280601f01601f191660200182016040528015612c6d5781602001600182028036833780820191505090505b50905060008290505b60008614612d2157600181612c8b9190614204565b90506000600a8088612c9d91906142a9565b612ca79190614803565b87612cb29190614204565b6030612cbe91906156ed565b905060008160f81b905080848481518110612cdc57612cdb614548565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a88612d1891906142a9565b97505050612c76565b819450505050505b919050565b606060008251905060008103612d565760405180602001604052806000815250915050612ec0565b60006003600283612d6791906147cf565b612d7191906142a9565b6004612d7d9190614803565b90506000602082612d8e91906147cf565b67ffffffffffffffff811115612da757612da6613a35565b5b6040519080825280601f01601f191660200182016040528015612dd95781602001600182028036833780820191505090505b50905060006040518060600160405280604081526020016158de604091399050600181016020830160005b86811015612e7d5760038101905062ffffff818a015116603f8160121c168401518060081b905060ff603f83600c1c1686015116810190508060081b905060ff603f8360061c1686015116810190508060081b905060ff603f831686015116810190508060e01b90508084526004840193505050612e04565b506003860660018114612e975760028114612ea757612eb2565b613d3d60f01b6002830352612eb2565b603d60f81b60018303525b508484525050819450505050505b919050565b6000612ed082611092565b9050612ee081600084600161307d565b612ee982611092565b90506004600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461300f8160008460016131a3565b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600181111561319d57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146131115780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546131099190614204565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461319c5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461319491906147cf565b925050819055505b5b50505050565b50505050565b6131b3838361338b565b6131c06000848484613204565b6131ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131f6906156c0565b60405180910390fd5b505050565b60006132258473ffffffffffffffffffffffffffffffffffffffff166135a8565b1561337e578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261324e612396565b8786866040518563ffffffff1660e01b81526004016132709493929190615777565b6020604051808303816000875af19250505080156132ac57506040513d601f19601f820116820180604052508101906132a991906157d8565b60015b61332e573d80600081146132dc576040519150601f19603f3d011682016040523d82523d6000602084013e6132e1565b606091505b506000815103613326576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161331d906156c0565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613383565b600190505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036133fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133f190615851565b60405180910390fd5b61340381612b65565b15613443576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161343a906158bd565b60405180910390fd5b61345160008383600161307d565b61345a81612b65565b1561349a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613491906158bd565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46135a46000838360016131a3565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001606081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61362881613615565b811461363357600080fd5b50565b6000813590506136458161361f565b92915050565b600080604083850312156136625761366161360b565b5b600061367085828601613636565b925050602061368185828601613636565b9150509250929050565b61369481613615565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156136d45780820151818401526020810190506136b9565b60008484015250505050565b6000601f19601f8301169050919050565b60006136fc8261369a565b61370681856136a5565b93506137168185602086016136b6565b61371f816136e0565b840191505092915050565b600060c083016000830151613742600086018261368b565b506020830151613755602086018261368b565b506040830151613768604086018261368b565b50606083015161377b606086018261368b565b50608083015161378e608086018261368b565b5060a083015184820360a08601526137a682826136f1565b9150508091505092915050565b600082825260208201905092915050565b60006137cf8261369a565b6137d981856137b3565b93506137e98185602086016136b6565b6137f2816136e0565b840191505092915050565b60006040820190508181036000830152613817818561372a565b9050818103602083015261382b81846137c4565b90509392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61386981613834565b811461387457600080fd5b50565b60008135905061388681613860565b92915050565b6000602082840312156138a2576138a161360b565b5b60006138b084828501613877565b91505092915050565b60008115159050919050565b6138ce816138b9565b82525050565b60006020820190506138e960008301846138c5565b92915050565b6000602082019050818103600083015261390981846137c4565b905092915050565b6000602082840312156139275761392661360b565b5b600061393584828501613636565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006139698261393e565b9050919050565b6139798161395e565b82525050565b60006020820190506139946000830184613970565b92915050565b6139a38161395e565b81146139ae57600080fd5b50565b6000813590506139c08161399a565b92915050565b600080604083850312156139dd576139dc61360b565b5b60006139eb858286016139b1565b92505060206139fc85828601613636565b9150509250929050565b613a0f81613615565b82525050565b6000602082019050613a2a6000830184613a06565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613a6d826136e0565b810181811067ffffffffffffffff82111715613a8c57613a8b613a35565b5b80604052505050565b6000613a9f613601565b9050613aab8282613a64565b919050565b600067ffffffffffffffff821115613acb57613aca613a35565b5b602082029050602081019050919050565b600080fd5b6000613af4613aef84613ab0565b613a95565b90508083825260208201905060208402830185811115613b1757613b16613adc565b5b835b81811015613b405780613b2c8882613636565b845260208401935050602081019050613b19565b5050509392505050565b600082601f830112613b5f57613b5e613a30565b5b8135613b6f848260208601613ae1565b91505092915050565b600060208284031215613b8e57613b8d61360b565b5b600082013567ffffffffffffffff811115613bac57613bab613610565b5b613bb884828501613b4a565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060c083016000830151613c05600086018261368b565b506020830151613c18602086018261368b565b506040830151613c2b604086018261368b565b506060830151613c3e606086018261368b565b506080830151613c51608086018261368b565b5060a083015184820360a0860152613c6982826136f1565b9150508091505092915050565b6000613c828383613bed565b905092915050565b6000602082019050919050565b6000613ca282613bc1565b613cac8185613bcc565b935083602082028501613cbe85613bdd565b8060005b85811015613cfa5784840389528151613cdb8582613c76565b9450613ce683613c8a565b925060208a01995050600181019050613cc2565b50829750879550505050505092915050565b60006020820190508181036000830152613d268184613c97565b905092915050565b600080600060608486031215613d4757613d4661360b565b5b6000613d55868287016139b1565b9350506020613d66868287016139b1565b9250506040613d7786828701613636565b9150509250925092565b6000819050919050565b6000613da6613da1613d9c8461393e565b613d81565b61393e565b9050919050565b6000613db882613d8b565b9050919050565b6000613dca82613dad565b9050919050565b613dda81613dbf565b82525050565b6000602082019050613df56000830184613dd1565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613e33838361368b565b60208301905092915050565b6000602082019050919050565b6000613e5782613dfb565b613e618185613e06565b9350613e6c83613e17565b8060005b83811015613e9d578151613e848882613e27565b9750613e8f83613e3f565b925050600181019050613e70565b5085935050505092915050565b60006020820190508181036000830152613ec48184613e4c565b905092915050565b6000613ed78261395e565b9050919050565b613ee781613ecc565b8114613ef257600080fd5b50565b600081359050613f0481613ede565b92915050565b60008060408385031215613f2157613f2061360b565b5b6000613f2f85828601613ef5565b925050602083013567ffffffffffffffff811115613f5057613f4f613610565b5b613f5c85828601613b4a565b9150509250929050565b600060208284031215613f7c57613f7b61360b565b5b6000613f8a848285016139b1565b91505092915050565b6000613f9e82613dad565b9050919050565b613fae81613f93565b82525050565b6000602082019050613fc96000830184613fa5565b92915050565b613fd8816138b9565b8114613fe357600080fd5b50565b600081359050613ff581613fcf565b92915050565b600080604083850312156140125761401161360b565b5b6000614020858286016139b1565b925050602061403185828601613fe6565b9150509250929050565b600080fd5b600067ffffffffffffffff82111561405b5761405a613a35565b5b614064826136e0565b9050602081019050919050565b82818337600083830152505050565b600061409361408e84614040565b613a95565b9050828152602081018484840111156140af576140ae61403b565b5b6140ba848285614071565b509392505050565b600082601f8301126140d7576140d6613a30565b5b81356140e7848260208601614080565b91505092915050565b6000806000806080858703121561410a5761410961360b565b5b6000614118878288016139b1565b9450506020614129878288016139b1565b935050604061413a87828801613636565b925050606085013567ffffffffffffffff81111561415b5761415a613610565b5b614167878288016140c2565b91505092959194509250565b6000602082019050818103600083015261418d818461372a565b905092915050565b600080604083850312156141ac576141ab61360b565b5b60006141ba858286016139b1565b92505060206141cb858286016139b1565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061420f82613615565b915061421a83613615565b9250828203905081811115614232576142316141d5565b5b92915050565b6000815190506142478161361f565b92915050565b6000602082840312156142635761426261360b565b5b600061427184828501614238565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006142b482613615565b91506142bf83613615565b9250826142cf576142ce61427a565b5b828204905092915050565b600067ffffffffffffffff8211156142f5576142f4613a35565b5b6142fe826136e0565b9050602081019050919050565b600061431e614319846142da565b613a95565b90508281526020810184848401111561433a5761433961403b565b5b6143458482856136b6565b509392505050565b600082601f83011261436257614361613a30565b5b815161437284826020860161430b565b91505092915050565b6000602082840312156143915761439061360b565b5b600082015167ffffffffffffffff8111156143af576143ae613610565b5b6143bb8482850161434d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061440b57607f821691505b60208210810361441e5761441d6143c4565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006144806021836137b3565b915061448b82614424565b604082019050919050565b600060208201905081810360008301526144af81614473565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000614512603d836137b3565b915061451d826144b6565b604082019050919050565b6000602082019050818103600083015261454181614505565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061458282613615565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036145b4576145b36141d5565b5b600182019050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b600061461b602d836137b3565b9150614626826145bf565b604082019050919050565b6000602082019050818103600083015261464a8161460e565b9050919050565b60008160011c9050919050565b6000808291508390505b60018511156146a857808604811115614684576146836141d5565b5b60018516156146935780820291505b80810290506146a185614651565b9450614668565b94509492505050565b6000826146c1576001905061477d565b816146cf576000905061477d565b81600181146146e557600281146146ef5761471e565b600191505061477d565b60ff841115614701576147006141d5565b5b8360020a915084821115614718576147176141d5565b5b5061477d565b5060208310610133831016604e8410600b84101617156147535782820a90508381111561474e5761474d6141d5565b5b61477d565b614760848484600161465e565b92509050818404811115614777576147766141d5565b5b81810290505b9392505050565b600061478f82613615565b915061479a83613615565b92506147c77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846146b1565b905092915050565b60006147da82613615565b91506147e583613615565b92508282019050808211156147fd576147fc6141d5565b5b92915050565b600061480e82613615565b915061481983613615565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614852576148516141d5565b5b828202905092915050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006148936018836137b3565b915061489e8261485d565b602082019050919050565b600060208201905081810360008301526148c281614886565b9050919050565b6000815190506148d88161399a565b92915050565b6000602082840312156148f4576148f361360b565b5b6000614902848285016148c9565b91505092915050565b60006040820190506149206000830185613970565b61492d6020830184613970565b9392505050565b60008151905061494381613fcf565b92915050565b60006020828403121561495f5761495e61360b565b5b600061496d84828501614934565b91505092915050565b600060608201905061498b6000830186613970565b6149986020830185613970565b6149a56040830184613a06565b949350505050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000614a096029836137b3565b9150614a14826149ad565b604082019050919050565b60006020820190508181036000830152614a38816149fc565b9050919050565b6000819050919050565b6000614a5482614a3f565b91507f80000000000000000000000000000000000000000000000000000000000000008203614a8657614a856141d5565b5b816000039050919050565b6000614a9c82614a3f565b9150614aa783614a3f565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615614ae657614ae56141d5565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615614b2357614b226141d5565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615614b6057614b5f6141d5565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615614b9d57614b9c6141d5565b5b828202905092915050565b6000614bb382614a3f565b9150614bbe83614a3f565b925082614bce57614bcd61427a565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615614c0757614c066141d5565b5b828205905092915050565b6000614c1d82614a3f565b9150614c2883614a3f565b925082820190508281121560008312168382126000841215161715614c5057614c4f6141d5565b5b92915050565b600081905092915050565b7f426c61636b486f6c652023000000000000000000000000000000000000000000600082015250565b6000614c97600b83614c56565b9150614ca282614c61565b600b82019050919050565b6000614cb88261369a565b614cc28185614c56565b9350614cd28185602086016136b6565b80840191505092915050565b6000614ce982614c8a565b9150614cf58284614cad565b915081905092915050565b7f5b00000000000000000000000000000000000000000000000000000000000000815250565b7f7b2274726169745f74797065223a20224c6576656c222c202276616c7565223a60008201527f2000000000000000000000000000000000000000000000000000000000000000602082015250565b6000614d82602183614c56565b9150614d8d82614d26565b602182019050919050565b7f7d2c000000000000000000000000000000000000000000000000000000000000815250565b7f7b2274726169745f74797065223a20224e616d65222c202276616c7565223a2060008201527f2200000000000000000000000000000000000000000000000000000000000000602082015250565b6000614e1a602183614c56565b9150614e2582614dbe565b602182019050919050565b7f227d2c0000000000000000000000000000000000000000000000000000000000815250565b7f7b2274726169745f74797065223a20224d617373222c202276616c7565223a20815250565b7f7d5d000000000000000000000000000000000000000000000000000000000000815250565b6000614ead82614d00565b600182019150614ebc82614d75565b9150614ec88286614cad565b9150614ed382614d98565b600282019150614ee282614e0d565b9150614eee8285614cad565b9150614ef982614e30565b600382019150614f0882614e56565b602082019150614f188284614cad565b9150614f2382614e7c565b600282019150819050949350505050565b7f7b226e616d65223a220000000000000000000000000000000000000000000000600082015250565b6000614f6a600983614c56565b9150614f7582614f34565b600982019050919050565b7f222c226465736372697074696f6e223a22000000000000000000000000000000600082015250565b6000614fb6601183614c56565b9150614fc182614f80565b601182019050919050565b7f222c000000000000000000000000000000000000000000000000000000000000600082015250565b6000615002600283614c56565b915061500d82614fcc565b600282019050919050565b7f2261747472696275746573223a20000000000000000000000000000000000000600082015250565b600061504e600e83614c56565b915061505982615018565b600e82019050919050565b7f2c2022696d616765223a2022646174613a696d6167652f7376672b786d6c3b6260008201527f61736536342c0000000000000000000000000000000000000000000000000000602082015250565b60006150c0602683614c56565b91506150cb82615064565b602682019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b600061510c600283614c56565b9150615117826150d6565b600282019050919050565b600061512d82614f5d565b91506151398287614cad565b915061514482614fa9565b91506151508286614cad565b915061515b82614ff5565b915061516682615041565b91506151728285614cad565b915061517d826150b3565b91506151898284614cad565b9150615194826150ff565b915081905095945050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b60006151d8601d83614c56565b91506151e3826151a2565b601d82019050919050565b60006151f9826151cb565b91506152058284614cad565b915081905092915050565b7f4d657267696e67206e6f7420656e61626c656400000000000000000000000000600082015250565b60006152466013836137b3565b915061525182615210565b602082019050919050565b6000602082019050818103600083015261527581615239565b9050919050565b7f4d757374206d65726765206174206c65617374203220746f6b656e7300000000600082015250565b60006152b2601c836137b3565b91506152bd8261527c565b602082019050919050565b600060208201905081810360008301526152e1816152a5565b9050919050565b7f4d757374206f776e20616c6c20746f6b656e7320287461726765742900000000600082015250565b600061531e601c836137b3565b9150615329826152e8565b602082019050919050565b6000602082019050818103600083015261534d81615311565b9050919050565b7f4d757374206f776e20616c6c20746f6b656e7320286275726e29000000000000600082015250565b600061538a601a836137b3565b915061539582615354565b602082019050919050565b600060208201905081810360008301526153b98161537d565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061541c6026836137b3565b9150615427826153c0565b604082019050919050565b6000602082019050818103600083015261544b8161540f565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006154886020836137b3565b915061549382615452565b602082019050919050565b600060208201905081810360008301526154b78161547b565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061551a6025836137b3565b9150615525826154be565b604082019050919050565b600060208201905081810360008301526155498161550d565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006155ac6024836137b3565b91506155b782615550565b604082019050919050565b600060208201905081810360008301526155db8161559f565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006156186019836137b3565b9150615623826155e2565b602082019050919050565b600060208201905081810360008301526156478161560b565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006156aa6032836137b3565b91506156b58261564e565b604082019050919050565b600060208201905081810360008301526156d98161569d565b9050919050565b600060ff82169050919050565b60006156f8826156e0565b9150615703836156e0565b9250828201905060ff81111561571c5761571b6141d5565b5b92915050565b600081519050919050565b600082825260208201905092915050565b600061574982615722565b615753818561572d565b93506157638185602086016136b6565b61576c816136e0565b840191505092915050565b600060808201905061578c6000830187613970565b6157996020830186613970565b6157a66040830185613a06565b81810360608301526157b8818461573e565b905095945050505050565b6000815190506157d281613860565b92915050565b6000602082840312156157ee576157ed61360b565b5b60006157fc848285016157c3565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061583b6020836137b3565b915061584682615805565b602082019050919050565b6000602082019050818103600083015261586a8161582e565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006158a7601c836137b3565b91506158b282615871565b602082019050919050565b600060208201905081810360008301526158d68161589a565b905091905056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f46756c6c79206f6e2d636861696e2c2070726f6365647572616c6c792067656e6572617465642c20616e696d6174656420626c61636b20686f6c65732e204265796f6e6420746865206576656e7420686f72697a6f6e2ea2646970667358221220ba35539b6a20e12fafc0c72c0e5490be2f07c5196f300731356e8a059173a8ea64736f6c63430008100033",
  "libraries": {
    "utils": "0xBFAb047349E5d8A6BC4A714970Ca1C80D6BAc978"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "blackHoleForMass(uint256,uint256)": {
        "params": {
          "totalMass": "mass of tokens to merge."
        },
        "returns": {
          "_0": "BlackHole struct of new Black Hole.",
          "_1": "SVG of new Black Hole."
        }
      },
      "blackHoleForTokenId(uint256)": {
        "params": {
          "_tokenId": "ID of the token."
        },
        "returns": {
          "_0": "BlackHole Structured representation of the token."
        }
      },
      "blackHolesForTokenIds(uint256[])": {
        "params": {
          "tokenIds": "List of token IDs."
        }
      },
      "constructor": {
        "details": "Constructs a new instance of the contract.",
        "params": {
          "_mergeOpenTimestamp": "Timestamp when merging is open.",
          "_name": "Name of the ERC721 token.",
          "_renderer": "Address of the Renderer contract.",
          "_symbol": "Symbol of the ERC721 token.",
          "_unmigratedBlackHoles": "Address of Black Holes contract."
        }
      },
      "getAdjustmentForMass(uint256)": {
        "params": {
          "_mass": "Mass to calculate the adjustment for."
        },
        "returns": {
          "_0": "Adjustment."
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "merge(uint256[])": {
        "params": {
          "tokens": "List of token IDs to merge. The first token in the list is the target."
        }
      },
      "migrate(address,uint256[])": {
        "params": {
          "tokenIds": "The Edition token IDs you want to migrate."
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "nameForBlackHoleLevel(uint256)": {
        "params": {
          "_level": "Level of the black hole."
        },
        "returns": {
          "_0": "name of the black hole level."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setMergeOpenTimestamp(uint256)": {
        "params": {
          "_mergeOpenTimestamp": "Timestamp when merging is open."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "params": {
          "_tokenId": "ID of the token to get the URI for."
        },
        "returns": {
          "_0": "Token URI."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "blackHoleForMass(uint256,uint256)": {
        "notice": "Simulates the merge for an array of tokens."
      },
      "blackHoleForTokenId(uint256)": {
        "notice": "Get the structured representation of a token by its ID."
      },
      "blackHolesForTokenIds(uint256[])": {
        "notice": "Returns Black Holes for a list of token IDs."
      },
      "getAdjustmentForMass(uint256)": {
        "notice": "Gets adjustment for a given mass."
      },
      "getUpgradeIntervals()": {
        "notice": "Returns the mass required to upgrade to the next level for each level."
      },
      "isMergingEnabled()": {
        "notice": "Returns whether merging is enabled or not."
      },
      "levelForMass(uint256)": {
        "notice": "Gets the level for a given mass."
      },
      "merge(uint256[])": {
        "notice": "Merges a list of tokens into a single token."
      },
      "migrate(address,uint256[])": {
        "notice": "Migrate Black Holes to Voidable Black Holes by burning the Black Holes.         Requires the Approval of this contract on the Edition contract."
      },
      "nameForBlackHoleLevel(uint256)": {
        "notice": "Returns the name of a black hole level."
      },
      "setMergeOpenTimestamp(uint256)": {
        "notice": "Sets the merging delay."
      },
      "tokenURI(uint256)": {
        "notice": "Returns the token URI for a given token ID."
      },
      "totalBurned()": {
        "notice": "Returns total number of tokens burned."
      },
      "totalMinted()": {
        "notice": "Returns total number of tokens minted."
      },
      "totalSupply()": {
        "notice": "Returns how many tokens this contract manages."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 141,
        "contract": "contracts/BlackHolesV2.sol:BlackHolesV2",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 143,
        "contract": "contracts/BlackHolesV2.sol:BlackHolesV2",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 147,
        "contract": "contracts/BlackHolesV2.sol:BlackHolesV2",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 151,
        "contract": "contracts/BlackHolesV2.sol:BlackHolesV2",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 155,
        "contract": "contracts/BlackHolesV2.sol:BlackHolesV2",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 161,
        "contract": "contracts/BlackHolesV2.sol:BlackHolesV2",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/BlackHolesV2.sol:BlackHolesV2",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2672,
        "contract": "contracts/BlackHolesV2.sol:BlackHolesV2",
        "label": "mergeOpenTimestamp",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2676,
        "contract": "contracts/BlackHolesV2.sol:BlackHolesV2",
        "label": "massesConsumed",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2679,
        "contract": "contracts/BlackHolesV2.sol:BlackHolesV2",
        "label": "renderer",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IRenderer)4131"
      },
      {
        "astId": 2682,
        "contract": "contracts/BlackHolesV2.sol:BlackHolesV2",
        "label": "unmigratedBlackHoles",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IBlackHoles)4114"
      },
      {
        "astId": 2685,
        "contract": "contracts/BlackHolesV2.sol:BlackHolesV2",
        "label": "voidableBlackHoles",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IBlackHoles)4114"
      },
      {
        "astId": 2687,
        "contract": "contracts/BlackHolesV2.sol:BlackHolesV2",
        "label": "minted",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2689,
        "contract": "contracts/BlackHolesV2.sol:BlackHolesV2",
        "label": "burned",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBlackHoles)4114": {
        "encoding": "inplace",
        "label": "contract IBlackHoles",
        "numberOfBytes": "20"
      },
      "t_contract(IRenderer)4131": {
        "encoding": "inplace",
        "label": "contract IRenderer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}